// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Costo represents a row from 'v1wq1ics1m037sn6.costo'.
type Costo struct {
	ID                 int           `json:"id"`                  // id
	UsuarioID          sql.NullInt64 `json:"usuario_id"`          // usuario_id
	FechaInicio        time.Time     `json:"fecha_inicio"`        // fecha_inicio
	FechaFinal         time.Time     `json:"fecha_final"`         // fecha_final
	FechaCreacion      time.Time     `json:"fecha_creacion"`      // fecha_creacion
	Costo              float64       `json:"costo"`               // costo
	FechaActualizacion time.Time     `json:"fecha_actualizacion"` // fecha_actualizacion

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Costo exists in the database.
func (c *Costo) Exists() bool {
	return c._exists
}

// Deleted provides information if the Costo has been deleted from the database.
func (c *Costo) Deleted() bool {
	return c._deleted
}

// Insert inserts the Costo to the database.
func (c *Costo) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.costo (` +
		`usuario_id, fecha_inicio, fecha_final, fecha_creacion, costo, fecha_actualizacion` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.UsuarioID, c.FechaInicio, c.FechaFinal, c.FechaCreacion, c.Costo, c.FechaActualizacion)
	res, err := db.Exec(sqlstr, c.UsuarioID, c.FechaInicio, c.FechaFinal, c.FechaCreacion, c.Costo, c.FechaActualizacion)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.ID = int(id)
	c._exists = true

	return nil
}

// Update updates the Costo in the database.
func (c *Costo) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.costo SET ` +
		`usuario_id = ?, fecha_inicio = ?, fecha_final = ?, fecha_creacion = ?, costo = ?, fecha_actualizacion = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, c.UsuarioID, c.FechaInicio, c.FechaFinal, c.FechaCreacion, c.Costo, c.FechaActualizacion, c.ID)
	_, err = db.Exec(sqlstr, c.UsuarioID, c.FechaInicio, c.FechaFinal, c.FechaCreacion, c.Costo, c.FechaActualizacion, c.ID)
	return err
}

// Save saves the Costo to the database.
func (c *Costo) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Costo from the database.
func (c *Costo) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.costo WHERE id = ?`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// UsuarioTrabajador returns the UsuarioTrabajador associated with the Costo's UsuarioID (usuario_id).
//
// Generated from foreign key 'FK_BB1C0BE7DB38439E'.
func (c *Costo) UsuarioTrabajador(db XODB) (*UsuarioTrabajador, error) {
	return UsuarioTrabajadorByID(db, int(c.UsuarioID.Int64))
}

// CostosByUsuarioID retrieves a row from 'v1wq1ics1m037sn6.costo' as a Costo.
//
// Generated from index 'IDX_BB1C0BE7DB38439E'.
func CostosByUsuarioID(db XODB, usuarioID sql.NullInt64) ([]*Costo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, usuario_id, fecha_inicio, fecha_final, fecha_creacion, costo, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.costo ` +
		`WHERE usuario_id = ?`

	// run query
	XOLog(sqlstr, usuarioID)
	q, err := db.Query(sqlstr, usuarioID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Costo{}
	for q.Next() {
		c := Costo{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.ID, &c.UsuarioID, &c.FechaInicio, &c.FechaFinal, &c.FechaCreacion, &c.Costo, &c.FechaActualizacion)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// CostoByID retrieves a row from 'v1wq1ics1m037sn6.costo' as a Costo.
//
// Generated from index 'costo_id_pkey'.
func CostoByID(db XODB, id int) (*Costo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, usuario_id, fecha_inicio, fecha_final, fecha_creacion, costo, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.costo ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	c := Costo{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.UsuarioID, &c.FechaInicio, &c.FechaFinal, &c.FechaCreacion, &c.Costo, &c.FechaActualizacion)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
