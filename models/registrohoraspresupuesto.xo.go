// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// RegistroHorasPresupuesto represents a row from 'v1wq1ics1m037sn6.registro_horas_presupuesto'.
type RegistroHorasPresupuesto struct {
	ID                  int           `json:"id"`                   // id
	ClienteID           sql.NullInt64 `json:"cliente_id"`           // cliente_id
	ProyectoID          sql.NullInt64 `json:"proyecto_id"`          // proyecto_id
	HorasPresupuestadas float64       `json:"horas_presupuestadas"` // horas_presupuestadas
	FechaCreacion       time.Time     `json:"fecha_creacion"`       // fecha_creacion
	CreadoPorID         sql.NullInt64 `json:"creado_por_id"`        // creado_por_id
	ActualizadoPorID    sql.NullInt64 `json:"actualizado_por_id"`   // actualizado_por_id
	FechaActualizacion  time.Time     `json:"fecha_actualizacion"`  // fecha_actualizacion
	AreaID              sql.NullInt64 `json:"area_id"`              // area_id
	UsuarioID           sql.NullInt64 `json:"usuario_id"`           // usuario_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RegistroHorasPresupuesto exists in the database.
func (rhp *RegistroHorasPresupuesto) Exists() bool {
	return rhp._exists
}

// Deleted provides information if the RegistroHorasPresupuesto has been deleted from the database.
func (rhp *RegistroHorasPresupuesto) Deleted() bool {
	return rhp._deleted
}

// Insert inserts the RegistroHorasPresupuesto to the database.
func (rhp *RegistroHorasPresupuesto) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if rhp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.registro_horas_presupuesto (` +
		`cliente_id, proyecto_id, horas_presupuestadas, fecha_creacion, creado_por_id, actualizado_por_id, fecha_actualizacion, area_id, usuario_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, rhp.ClienteID, rhp.ProyectoID, rhp.HorasPresupuestadas, rhp.FechaCreacion, rhp.CreadoPorID, rhp.ActualizadoPorID, rhp.FechaActualizacion, rhp.AreaID, rhp.UsuarioID)
	res, err := db.Exec(sqlstr, rhp.ClienteID, rhp.ProyectoID, rhp.HorasPresupuestadas, rhp.FechaCreacion, rhp.CreadoPorID, rhp.ActualizadoPorID, rhp.FechaActualizacion, rhp.AreaID, rhp.UsuarioID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	rhp.ID = int(id)
	rhp._exists = true

	return nil
}

// Update updates the RegistroHorasPresupuesto in the database.
func (rhp *RegistroHorasPresupuesto) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rhp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if rhp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.registro_horas_presupuesto SET ` +
		`cliente_id = ?, proyecto_id = ?, horas_presupuestadas = ?, fecha_creacion = ?, creado_por_id = ?, actualizado_por_id = ?, fecha_actualizacion = ?, area_id = ?, usuario_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, rhp.ClienteID, rhp.ProyectoID, rhp.HorasPresupuestadas, rhp.FechaCreacion, rhp.CreadoPorID, rhp.ActualizadoPorID, rhp.FechaActualizacion, rhp.AreaID, rhp.UsuarioID, rhp.ID)
	_, err = db.Exec(sqlstr, rhp.ClienteID, rhp.ProyectoID, rhp.HorasPresupuestadas, rhp.FechaCreacion, rhp.CreadoPorID, rhp.ActualizadoPorID, rhp.FechaActualizacion, rhp.AreaID, rhp.UsuarioID, rhp.ID)
	return err
}

// Save saves the RegistroHorasPresupuesto to the database.
func (rhp *RegistroHorasPresupuesto) Save(db XODB) error {
	if rhp.Exists() {
		return rhp.Update(db)
	}

	return rhp.Insert(db)
}

// Delete deletes the RegistroHorasPresupuesto from the database.
func (rhp *RegistroHorasPresupuesto) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rhp._exists {
		return nil
	}

	// if deleted, bail
	if rhp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.registro_horas_presupuesto WHERE id = ?`

	// run query
	XOLog(sqlstr, rhp.ID)
	_, err = db.Exec(sqlstr, rhp.ID)
	if err != nil {
		return err
	}

	// set deleted
	rhp._deleted = true

	return nil
}

// Area returns the Area associated with the RegistroHorasPresupuesto's AreaID (area_id).
//
// Generated from foreign key 'FK_787E83EFBD0F409C'.
func (rhp *RegistroHorasPresupuesto) Area(db XODB) (*Area, error) {
	return AreaByID(db, int(rhp.AreaID.Int64))
}

// UsuarioTrabajador returns the UsuarioTrabajador associated with the RegistroHorasPresupuesto's UsuarioID (usuario_id).
//
// Generated from foreign key 'FK_787E83EFDB38439E'.
func (rhp *RegistroHorasPresupuesto) UsuarioTrabajador(db XODB) (*UsuarioTrabajador, error) {
	return UsuarioTrabajadorByID(db, int(rhp.UsuarioID.Int64))
}

// Cliente returns the Cliente associated with the RegistroHorasPresupuesto's ClienteID (cliente_id).
//
// Generated from foreign key 'FK_787E83EFDE734E51'.
func (rhp *RegistroHorasPresupuesto) Cliente(db XODB) (*Cliente, error) {
	return ClienteByID(db, int(rhp.ClienteID.Int64))
}

// CodigoUsuarioByActualizadoPorID returns the CodigoUsuario associated with the RegistroHorasPresupuesto's ActualizadoPorID (actualizado_por_id).
//
// Generated from foreign key 'FK_787E83EFF6167A1C'.
func (rhp *RegistroHorasPresupuesto) CodigoUsuarioByActualizadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(rhp.ActualizadoPorID.Int64))
}

// ProyectoPresupuesto returns the ProyectoPresupuesto associated with the RegistroHorasPresupuesto's ProyectoID (proyecto_id).
//
// Generated from foreign key 'FK_787E83EFF625D1BA'.
func (rhp *RegistroHorasPresupuesto) ProyectoPresupuesto(db XODB) (*ProyectoPresupuesto, error) {
	return ProyectoPresupuestoByID(db, int(rhp.ProyectoID.Int64))
}

// CodigoUsuarioByCreadoPorID returns the CodigoUsuario associated with the RegistroHorasPresupuesto's CreadoPorID (creado_por_id).
//
// Generated from foreign key 'FK_787E83EFFE35D8C4'.
func (rhp *RegistroHorasPresupuesto) CodigoUsuarioByCreadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(rhp.CreadoPorID.Int64))
}

// RegistroHorasPresupuestosByAreaID retrieves a row from 'v1wq1ics1m037sn6.registro_horas_presupuesto' as a RegistroHorasPresupuesto.
//
// Generated from index 'IDX_787E83EFBD0F409C'.
func RegistroHorasPresupuestosByAreaID(db XODB, areaID sql.NullInt64) ([]*RegistroHorasPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cliente_id, proyecto_id, horas_presupuestadas, fecha_creacion, creado_por_id, actualizado_por_id, fecha_actualizacion, area_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.registro_horas_presupuesto ` +
		`WHERE area_id = ?`

	// run query
	XOLog(sqlstr, areaID)
	q, err := db.Query(sqlstr, areaID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHorasPresupuesto{}
	for q.Next() {
		rhp := RegistroHorasPresupuesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&rhp.ID, &rhp.ClienteID, &rhp.ProyectoID, &rhp.HorasPresupuestadas, &rhp.FechaCreacion, &rhp.CreadoPorID, &rhp.ActualizadoPorID, &rhp.FechaActualizacion, &rhp.AreaID, &rhp.UsuarioID)
		if err != nil {
			return nil, err
		}

		res = append(res, &rhp)
	}

	return res, nil
}

// RegistroHorasPresupuestosByUsuarioID retrieves a row from 'v1wq1ics1m037sn6.registro_horas_presupuesto' as a RegistroHorasPresupuesto.
//
// Generated from index 'IDX_787E83EFDB38439E'.
func RegistroHorasPresupuestosByUsuarioID(db XODB, usuarioID sql.NullInt64) ([]*RegistroHorasPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cliente_id, proyecto_id, horas_presupuestadas, fecha_creacion, creado_por_id, actualizado_por_id, fecha_actualizacion, area_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.registro_horas_presupuesto ` +
		`WHERE usuario_id = ?`

	// run query
	XOLog(sqlstr, usuarioID)
	q, err := db.Query(sqlstr, usuarioID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHorasPresupuesto{}
	for q.Next() {
		rhp := RegistroHorasPresupuesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&rhp.ID, &rhp.ClienteID, &rhp.ProyectoID, &rhp.HorasPresupuestadas, &rhp.FechaCreacion, &rhp.CreadoPorID, &rhp.ActualizadoPorID, &rhp.FechaActualizacion, &rhp.AreaID, &rhp.UsuarioID)
		if err != nil {
			return nil, err
		}

		res = append(res, &rhp)
	}

	return res, nil
}

// RegistroHorasPresupuestosByClienteID retrieves a row from 'v1wq1ics1m037sn6.registro_horas_presupuesto' as a RegistroHorasPresupuesto.
//
// Generated from index 'IDX_787E83EFDE734E51'.
func RegistroHorasPresupuestosByClienteID(db XODB, clienteID sql.NullInt64) ([]*RegistroHorasPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cliente_id, proyecto_id, horas_presupuestadas, fecha_creacion, creado_por_id, actualizado_por_id, fecha_actualizacion, area_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.registro_horas_presupuesto ` +
		`WHERE cliente_id = ?`

	// run query
	XOLog(sqlstr, clienteID)
	q, err := db.Query(sqlstr, clienteID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHorasPresupuesto{}
	for q.Next() {
		rhp := RegistroHorasPresupuesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&rhp.ID, &rhp.ClienteID, &rhp.ProyectoID, &rhp.HorasPresupuestadas, &rhp.FechaCreacion, &rhp.CreadoPorID, &rhp.ActualizadoPorID, &rhp.FechaActualizacion, &rhp.AreaID, &rhp.UsuarioID)
		if err != nil {
			return nil, err
		}

		res = append(res, &rhp)
	}

	return res, nil
}

// RegistroHorasPresupuestosByActualizadoPorID retrieves a row from 'v1wq1ics1m037sn6.registro_horas_presupuesto' as a RegistroHorasPresupuesto.
//
// Generated from index 'IDX_787E83EFF6167A1C'.
func RegistroHorasPresupuestosByActualizadoPorID(db XODB, actualizadoPorID sql.NullInt64) ([]*RegistroHorasPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cliente_id, proyecto_id, horas_presupuestadas, fecha_creacion, creado_por_id, actualizado_por_id, fecha_actualizacion, area_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.registro_horas_presupuesto ` +
		`WHERE actualizado_por_id = ?`

	// run query
	XOLog(sqlstr, actualizadoPorID)
	q, err := db.Query(sqlstr, actualizadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHorasPresupuesto{}
	for q.Next() {
		rhp := RegistroHorasPresupuesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&rhp.ID, &rhp.ClienteID, &rhp.ProyectoID, &rhp.HorasPresupuestadas, &rhp.FechaCreacion, &rhp.CreadoPorID, &rhp.ActualizadoPorID, &rhp.FechaActualizacion, &rhp.AreaID, &rhp.UsuarioID)
		if err != nil {
			return nil, err
		}

		res = append(res, &rhp)
	}

	return res, nil
}

// RegistroHorasPresupuestosByProyectoID retrieves a row from 'v1wq1ics1m037sn6.registro_horas_presupuesto' as a RegistroHorasPresupuesto.
//
// Generated from index 'IDX_787E83EFF625D1BA'.
func RegistroHorasPresupuestosByProyectoID(db XODB, proyectoID sql.NullInt64) ([]*RegistroHorasPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cliente_id, proyecto_id, horas_presupuestadas, fecha_creacion, creado_por_id, actualizado_por_id, fecha_actualizacion, area_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.registro_horas_presupuesto ` +
		`WHERE proyecto_id = ?`

	// run query
	XOLog(sqlstr, proyectoID)
	q, err := db.Query(sqlstr, proyectoID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHorasPresupuesto{}
	for q.Next() {
		rhp := RegistroHorasPresupuesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&rhp.ID, &rhp.ClienteID, &rhp.ProyectoID, &rhp.HorasPresupuestadas, &rhp.FechaCreacion, &rhp.CreadoPorID, &rhp.ActualizadoPorID, &rhp.FechaActualizacion, &rhp.AreaID, &rhp.UsuarioID)
		if err != nil {
			return nil, err
		}

		res = append(res, &rhp)
	}

	return res, nil
}

// RegistroHorasPresupuestosByCreadoPorID retrieves a row from 'v1wq1ics1m037sn6.registro_horas_presupuesto' as a RegistroHorasPresupuesto.
//
// Generated from index 'IDX_787E83EFFE35D8C4'.
func RegistroHorasPresupuestosByCreadoPorID(db XODB, creadoPorID sql.NullInt64) ([]*RegistroHorasPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cliente_id, proyecto_id, horas_presupuestadas, fecha_creacion, creado_por_id, actualizado_por_id, fecha_actualizacion, area_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.registro_horas_presupuesto ` +
		`WHERE creado_por_id = ?`

	// run query
	XOLog(sqlstr, creadoPorID)
	q, err := db.Query(sqlstr, creadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHorasPresupuesto{}
	for q.Next() {
		rhp := RegistroHorasPresupuesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&rhp.ID, &rhp.ClienteID, &rhp.ProyectoID, &rhp.HorasPresupuestadas, &rhp.FechaCreacion, &rhp.CreadoPorID, &rhp.ActualizadoPorID, &rhp.FechaActualizacion, &rhp.AreaID, &rhp.UsuarioID)
		if err != nil {
			return nil, err
		}

		res = append(res, &rhp)
	}

	return res, nil
}

// RegistroHorasPresupuestoByID retrieves a row from 'v1wq1ics1m037sn6.registro_horas_presupuesto' as a RegistroHorasPresupuesto.
//
// Generated from index 'registro_horas_presupuesto_id_pkey'.
func RegistroHorasPresupuestoByID(db XODB, id int) (*RegistroHorasPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cliente_id, proyecto_id, horas_presupuestadas, fecha_creacion, creado_por_id, actualizado_por_id, fecha_actualizacion, area_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.registro_horas_presupuesto ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	rhp := RegistroHorasPresupuesto{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&rhp.ID, &rhp.ClienteID, &rhp.ProyectoID, &rhp.HorasPresupuestadas, &rhp.FechaCreacion, &rhp.CreadoPorID, &rhp.ActualizadoPorID, &rhp.FechaActualizacion, &rhp.AreaID, &rhp.UsuarioID)
	if err != nil {
		return nil, err
	}

	return &rhp, nil
}
