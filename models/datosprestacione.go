// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// DatosPrestacione represents a row from 'v1wq1ics1m037sn6.datos_prestaciones'.
type DatosPrestacione struct {
	ID                      int             `json:"id"`                        // id
	UsuarioID               sql.NullInt64   `json:"usuario_id"`                // usuario_id
	SueldoBase              float64         `json:"sueldo_base"`               // sueldo_base
	BonificacionIncentivo   float64         `json:"bonificacion_incentivo"`    // bonificacion_incentivo
	OtraBonificacion        sql.NullFloat64 `json:"otra_bonificacion"`         // otra_bonificacion
	Gasolina                sql.NullFloat64 `json:"gasolina"`                  // gasolina
	PrestacionesSobreSueldo sql.NullFloat64 `json:"prestaciones_sobre_sueldo"` // prestaciones_sobre_sueldo
	OtrasPrestaciones       sql.NullFloat64 `json:"otras_prestaciones"`        // otras_prestaciones
	Viaticos                sql.NullFloat64 `json:"viaticos"`                  // viaticos
	Otros                   sql.NullFloat64 `json:"otros"`                     // otros
	Depreciacion            sql.NullFloat64 `json:"depreciacion"`              // depreciacion
	Indemnizacion           sql.NullFloat64 `json:"indemnizacion"`             // indemnizacion
	Aguinaldo               sql.NullFloat64 `json:"aguinaldo"`                 // aguinaldo
	Bono14                  sql.NullFloat64 `json:"bono14"`                    // bono14
	CuotaPatronal           sql.NullFloat64 `json:"cuota_patronal"`            // cuota_patronal
	FechaCreacion           time.Time       `json:"fecha_creacion"`            // fecha_creacion
	FechaActualizacion      time.Time       `json:"fecha_actualizacion"`       // fecha_actualizacion
	CreadoPorID             sql.NullInt64   `json:"creado_por_id"`             // creado_por_id
	ActualizadoPorID        sql.NullInt64   `json:"actualizado_por_id"`        // actualizado_por_id
	GastosIndirectos        sql.NullFloat64 `json:"gastos_indirectos"`         // gastos_indirectos

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DatosPrestacione exists in the database.
func (dp *DatosPrestacione) Exists() bool {
	return dp._exists
}

// Deleted provides information if the DatosPrestacione has been deleted from the database.
func (dp *DatosPrestacione) Deleted() bool {
	return dp._deleted
}

// Insert inserts the DatosPrestacione to the database.
func (dp *DatosPrestacione) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if dp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.datos_prestaciones (` +
		`usuario_id, sueldo_base, bonificacion_incentivo, otra_bonificacion, gasolina, prestaciones_sobre_sueldo, otras_prestaciones, viaticos, otros, depreciacion, indemnizacion, aguinaldo, bono14, cuota_patronal, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id, gastos_indirectos` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, dp.UsuarioID, dp.SueldoBase, dp.BonificacionIncentivo, dp.OtraBonificacion, dp.Gasolina, dp.PrestacionesSobreSueldo, dp.OtrasPrestaciones, dp.Viaticos, dp.Otros, dp.Depreciacion, dp.Indemnizacion, dp.Aguinaldo, dp.Bono14, dp.CuotaPatronal, dp.FechaCreacion, dp.FechaActualizacion, dp.CreadoPorID, dp.ActualizadoPorID, dp.GastosIndirectos)
	res, err := db.Exec(sqlstr, dp.UsuarioID, dp.SueldoBase, dp.BonificacionIncentivo, dp.OtraBonificacion, dp.Gasolina, dp.PrestacionesSobreSueldo, dp.OtrasPrestaciones, dp.Viaticos, dp.Otros, dp.Depreciacion, dp.Indemnizacion, dp.Aguinaldo, dp.Bono14, dp.CuotaPatronal, dp.FechaCreacion, dp.FechaActualizacion, dp.CreadoPorID, dp.ActualizadoPorID, dp.GastosIndirectos)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dp.ID = int(id)
	dp._exists = true

	return nil
}

// Update updates the DatosPrestacione in the database.
func (dp *DatosPrestacione) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if dp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.datos_prestaciones SET ` +
		`usuario_id = ?, sueldo_base = ?, bonificacion_incentivo = ?, otra_bonificacion = ?, gasolina = ?, prestaciones_sobre_sueldo = ?, otras_prestaciones = ?, viaticos = ?, otros = ?, depreciacion = ?, indemnizacion = ?, aguinaldo = ?, bono14 = ?, cuota_patronal = ?, fecha_creacion = ?, fecha_actualizacion = ?, creado_por_id = ?, actualizado_por_id = ?, gastos_indirectos = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, dp.UsuarioID, dp.SueldoBase, dp.BonificacionIncentivo, dp.OtraBonificacion, dp.Gasolina, dp.PrestacionesSobreSueldo, dp.OtrasPrestaciones, dp.Viaticos, dp.Otros, dp.Depreciacion, dp.Indemnizacion, dp.Aguinaldo, dp.Bono14, dp.CuotaPatronal, dp.FechaCreacion, dp.FechaActualizacion, dp.CreadoPorID, dp.ActualizadoPorID, dp.GastosIndirectos, dp.ID)
	_, err = db.Exec(sqlstr, dp.UsuarioID, dp.SueldoBase, dp.BonificacionIncentivo, dp.OtraBonificacion, dp.Gasolina, dp.PrestacionesSobreSueldo, dp.OtrasPrestaciones, dp.Viaticos, dp.Otros, dp.Depreciacion, dp.Indemnizacion, dp.Aguinaldo, dp.Bono14, dp.CuotaPatronal, dp.FechaCreacion, dp.FechaActualizacion, dp.CreadoPorID, dp.ActualizadoPorID, dp.GastosIndirectos, dp.ID)
	return err
}

// Save saves the DatosPrestacione to the database.
func (dp *DatosPrestacione) Save(db XODB) error {
	if dp.Exists() {
		return dp.Update(db)
	}

	return dp.Insert(db)
}

// Delete deletes the DatosPrestacione from the database.
func (dp *DatosPrestacione) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dp._exists {
		return nil
	}

	// if deleted, bail
	if dp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.datos_prestaciones WHERE id = ?`

	// run query
	XOLog(sqlstr, dp.ID)
	_, err = db.Exec(sqlstr, dp.ID)
	if err != nil {
		return err
	}

	// set deleted
	dp._deleted = true

	return nil
}

// UsuarioTrabajador returns the UsuarioTrabajador associated with the DatosPrestacione's UsuarioID (usuario_id).
//
// Generated from foreign key 'FK_49D91566DB38439E'.
func (dp *DatosPrestacione) UsuarioTrabajador(db XODB) (*UsuarioTrabajador, error) {
	return UsuarioTrabajadorByID(db, int(dp.UsuarioID.Int64))
}

// CodigoUsuarioByActualizadoPorID returns the CodigoUsuario associated with the DatosPrestacione's ActualizadoPorID (actualizado_por_id).
//
// Generated from foreign key 'FK_49D91566F6167A1C'.
func (dp *DatosPrestacione) CodigoUsuarioByActualizadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(dp.ActualizadoPorID.Int64))
}

// CodigoUsuarioByCreadoPorID returns the CodigoUsuario associated with the DatosPrestacione's CreadoPorID (creado_por_id).
//
// Generated from foreign key 'FK_49D91566FE35D8C4'.
func (dp *DatosPrestacione) CodigoUsuarioByCreadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(dp.CreadoPorID.Int64))
}

// DatosPrestacionesByUsuarioID retrieves a row from 'v1wq1ics1m037sn6.datos_prestaciones' as a DatosPrestacione.
//
// Generated from index 'IDX_49D91566DB38439E'.
func DatosPrestacionesByUsuarioID(db XODB, usuarioID sql.NullInt64) ([]*DatosPrestacione, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, usuario_id, sueldo_base, bonificacion_incentivo, otra_bonificacion, gasolina, prestaciones_sobre_sueldo, otras_prestaciones, viaticos, otros, depreciacion, indemnizacion, aguinaldo, bono14, cuota_patronal, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id, gastos_indirectos ` +
		`FROM v1wq1ics1m037sn6.datos_prestaciones ` +
		`WHERE usuario_id = ?`

	// run query
	XOLog(sqlstr, usuarioID)
	q, err := db.Query(sqlstr, usuarioID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*DatosPrestacione{}
	for q.Next() {
		dp := DatosPrestacione{
			_exists: true,
		}

		// scan
		err = q.Scan(&dp.ID, &dp.UsuarioID, &dp.SueldoBase, &dp.BonificacionIncentivo, &dp.OtraBonificacion, &dp.Gasolina, &dp.PrestacionesSobreSueldo, &dp.OtrasPrestaciones, &dp.Viaticos, &dp.Otros, &dp.Depreciacion, &dp.Indemnizacion, &dp.Aguinaldo, &dp.Bono14, &dp.CuotaPatronal, &dp.FechaCreacion, &dp.FechaActualizacion, &dp.CreadoPorID, &dp.ActualizadoPorID, &dp.GastosIndirectos)
		if err != nil {
			return nil, err
		}

		res = append(res, &dp)
	}

	return res, nil
}

// DatosPrestacionesByActualizadoPorID retrieves a row from 'v1wq1ics1m037sn6.datos_prestaciones' as a DatosPrestacione.
//
// Generated from index 'IDX_49D91566F6167A1C'.
func DatosPrestacionesByActualizadoPorID(db XODB, actualizadoPorID sql.NullInt64) ([]*DatosPrestacione, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, usuario_id, sueldo_base, bonificacion_incentivo, otra_bonificacion, gasolina, prestaciones_sobre_sueldo, otras_prestaciones, viaticos, otros, depreciacion, indemnizacion, aguinaldo, bono14, cuota_patronal, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id, gastos_indirectos ` +
		`FROM v1wq1ics1m037sn6.datos_prestaciones ` +
		`WHERE actualizado_por_id = ?`

	// run query
	XOLog(sqlstr, actualizadoPorID)
	q, err := db.Query(sqlstr, actualizadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*DatosPrestacione{}
	for q.Next() {
		dp := DatosPrestacione{
			_exists: true,
		}

		// scan
		err = q.Scan(&dp.ID, &dp.UsuarioID, &dp.SueldoBase, &dp.BonificacionIncentivo, &dp.OtraBonificacion, &dp.Gasolina, &dp.PrestacionesSobreSueldo, &dp.OtrasPrestaciones, &dp.Viaticos, &dp.Otros, &dp.Depreciacion, &dp.Indemnizacion, &dp.Aguinaldo, &dp.Bono14, &dp.CuotaPatronal, &dp.FechaCreacion, &dp.FechaActualizacion, &dp.CreadoPorID, &dp.ActualizadoPorID, &dp.GastosIndirectos)
		if err != nil {
			return nil, err
		}

		res = append(res, &dp)
	}

	return res, nil
}

// DatosPrestacionesByCreadoPorID retrieves a row from 'v1wq1ics1m037sn6.datos_prestaciones' as a DatosPrestacione.
//
// Generated from index 'IDX_49D91566FE35D8C4'.
func DatosPrestacionesByCreadoPorID(db XODB, creadoPorID sql.NullInt64) ([]*DatosPrestacione, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, usuario_id, sueldo_base, bonificacion_incentivo, otra_bonificacion, gasolina, prestaciones_sobre_sueldo, otras_prestaciones, viaticos, otros, depreciacion, indemnizacion, aguinaldo, bono14, cuota_patronal, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id, gastos_indirectos ` +
		`FROM v1wq1ics1m037sn6.datos_prestaciones ` +
		`WHERE creado_por_id = ?`

	// run query
	XOLog(sqlstr, creadoPorID)
	q, err := db.Query(sqlstr, creadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*DatosPrestacione{}
	for q.Next() {
		dp := DatosPrestacione{
			_exists: true,
		}

		// scan
		err = q.Scan(&dp.ID, &dp.UsuarioID, &dp.SueldoBase, &dp.BonificacionIncentivo, &dp.OtraBonificacion, &dp.Gasolina, &dp.PrestacionesSobreSueldo, &dp.OtrasPrestaciones, &dp.Viaticos, &dp.Otros, &dp.Depreciacion, &dp.Indemnizacion, &dp.Aguinaldo, &dp.Bono14, &dp.CuotaPatronal, &dp.FechaCreacion, &dp.FechaActualizacion, &dp.CreadoPorID, &dp.ActualizadoPorID, &dp.GastosIndirectos)
		if err != nil {
			return nil, err
		}

		res = append(res, &dp)
	}

	return res, nil
}

// DatosPrestacioneByID retrieves a row from 'v1wq1ics1m037sn6.datos_prestaciones' as a DatosPrestacione.
//
// Generated from index 'datos_prestaciones_id_pkey'.
func DatosPrestacioneByID(db XODB, id int) (*DatosPrestacione, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, usuario_id, sueldo_base, bonificacion_incentivo, otra_bonificacion, gasolina, prestaciones_sobre_sueldo, otras_prestaciones, viaticos, otros, depreciacion, indemnizacion, aguinaldo, bono14, cuota_patronal, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id, gastos_indirectos ` +
		`FROM v1wq1ics1m037sn6.datos_prestaciones ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	dp := DatosPrestacione{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&dp.ID, &dp.UsuarioID, &dp.SueldoBase, &dp.BonificacionIncentivo, &dp.OtraBonificacion, &dp.Gasolina, &dp.PrestacionesSobreSueldo, &dp.OtrasPrestaciones, &dp.Viaticos, &dp.Otros, &dp.Depreciacion, &dp.Indemnizacion, &dp.Aguinaldo, &dp.Bono14, &dp.CuotaPatronal, &dp.FechaCreacion, &dp.FechaActualizacion, &dp.CreadoPorID, &dp.ActualizadoPorID, &dp.GastosIndirectos)
	if err != nil {
		return nil, err
	}

	return &dp, nil
}
