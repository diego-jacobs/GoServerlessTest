// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// AsignacionCliente represents a row from 'v1wq1ics1m037sn6.asignacion_cliente'.
type AsignacionCliente struct {
	ID        int           `json:"id"`         // id
	ClienteID sql.NullInt64 `json:"cliente_id"` // cliente_id
	UsuarioID sql.NullInt64 `json:"usuario_id"` // usuario_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AsignacionCliente exists in the database.
func (ac *AsignacionCliente) Exists() bool {
	return ac._exists
}

// Deleted provides information if the AsignacionCliente has been deleted from the database.
func (ac *AsignacionCliente) Deleted() bool {
	return ac._deleted
}

// Insert inserts the AsignacionCliente to the database.
func (ac *AsignacionCliente) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ac._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.asignacion_cliente (` +
		`cliente_id, usuario_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ac.ClienteID, ac.UsuarioID)
	res, err := db.Exec(sqlstr, ac.ClienteID, ac.UsuarioID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ac.ID = int(id)
	ac._exists = true

	return nil
}

// Update updates the AsignacionCliente in the database.
func (ac *AsignacionCliente) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ac._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ac._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.asignacion_cliente SET ` +
		`cliente_id = ?, usuario_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ac.ClienteID, ac.UsuarioID, ac.ID)
	_, err = db.Exec(sqlstr, ac.ClienteID, ac.UsuarioID, ac.ID)
	return err
}

// Save saves the AsignacionCliente to the database.
func (ac *AsignacionCliente) Save(db XODB) error {
	if ac.Exists() {
		return ac.Update(db)
	}

	return ac.Insert(db)
}

// Delete deletes the AsignacionCliente from the database.
func (ac *AsignacionCliente) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ac._exists {
		return nil
	}

	// if deleted, bail
	if ac._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.asignacion_cliente WHERE id = ?`

	// run query
	XOLog(sqlstr, ac.ID)
	_, err = db.Exec(sqlstr, ac.ID)
	if err != nil {
		return err
	}

	// set deleted
	ac._deleted = true

	return nil
}

// Usuario returns the Usuario associated with the AsignacionCliente's UsuarioID (usuario_id).
//
// Generated from foreign key 'FK_D4E48266DB38439E'.
func (ac *AsignacionCliente) Usuario(db XODB) (*Usuario, error) {
	return UsuarioByID(db, int(ac.UsuarioID.Int64))
}

// Cliente returns the Cliente associated with the AsignacionCliente's ClienteID (cliente_id).
//
// Generated from foreign key 'FK_D4E48266DE734E51'.
func (ac *AsignacionCliente) Cliente(db XODB) (*Cliente, error) {
	return ClienteByID(db, int(ac.ClienteID.Int64))
}

// AsignacionClientesByUsuarioID retrieves a row from 'v1wq1ics1m037sn6.asignacion_cliente' as a AsignacionCliente.
//
// Generated from index 'IDX_D4E48266DB38439E'.
func AsignacionClientesByUsuarioID(db XODB, usuarioID sql.NullInt64) ([]*AsignacionCliente, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cliente_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.asignacion_cliente ` +
		`WHERE usuario_id = ?`

	// run query
	XOLog(sqlstr, usuarioID)
	q, err := db.Query(sqlstr, usuarioID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AsignacionCliente{}
	for q.Next() {
		ac := AsignacionCliente{
			_exists: true,
		}

		// scan
		err = q.Scan(&ac.ID, &ac.ClienteID, &ac.UsuarioID)
		if err != nil {
			return nil, err
		}

		res = append(res, &ac)
	}

	return res, nil
}

// AsignacionClientesByClienteID retrieves a row from 'v1wq1ics1m037sn6.asignacion_cliente' as a AsignacionCliente.
//
// Generated from index 'IDX_D4E48266DE734E51'.
func AsignacionClientesByClienteID(db XODB, clienteID sql.NullInt64) ([]*AsignacionCliente, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cliente_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.asignacion_cliente ` +
		`WHERE cliente_id = ?`

	// run query
	XOLog(sqlstr, clienteID)
	q, err := db.Query(sqlstr, clienteID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AsignacionCliente{}
	for q.Next() {
		ac := AsignacionCliente{
			_exists: true,
		}

		// scan
		err = q.Scan(&ac.ID, &ac.ClienteID, &ac.UsuarioID)
		if err != nil {
			return nil, err
		}

		res = append(res, &ac)
	}

	return res, nil
}

// AsignacionClienteByID retrieves a row from 'v1wq1ics1m037sn6.asignacion_cliente' as a AsignacionCliente.
//
// Generated from index 'asignacion_cliente_id_pkey'.
func AsignacionClienteByID(db XODB, id int) (*AsignacionCliente, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, cliente_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.asignacion_cliente ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ac := AsignacionCliente{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ac.ID, &ac.ClienteID, &ac.UsuarioID)
	if err != nil {
		return nil, err
	}

	return &ac, nil
}
