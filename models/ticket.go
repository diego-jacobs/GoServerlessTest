// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Ticket represents a row from 'v1wq1ics1m037sn6.ticket'.
type Ticket struct {
	ID            int       `json:"id"`              // id
	UserCreatedID int       `json:"user_created_id"` // user_created_id
	LastUserID    int       `json:"last_user_id"`    // last_user_id
	LastMessage   time.Time `json:"last_message"`    // last_message
	Subject       string    `json:"subject"`         // subject
	Status        int16     `json:"status"`          // status
	Priority      int16     `json:"priority"`        // priority
	CreatedAt     time.Time `json:"created_at"`      // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Ticket exists in the database.
func (t *Ticket) Exists() bool {
	return t._exists
}

// Deleted provides information if the Ticket has been deleted from the database.
func (t *Ticket) Deleted() bool {
	return t._deleted
}

// Insert inserts the Ticket to the database.
func (t *Ticket) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.ticket (` +
		`user_created_id, last_user_id, last_message, subject, status, priority, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, t.UserCreatedID, t.LastUserID, t.LastMessage, t.Subject, t.Status, t.Priority, t.CreatedAt)
	res, err := db.Exec(sqlstr, t.UserCreatedID, t.LastUserID, t.LastMessage, t.Subject, t.Status, t.Priority, t.CreatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	t.ID = int(id)
	t._exists = true

	return nil
}

// Update updates the Ticket in the database.
func (t *Ticket) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.ticket SET ` +
		`user_created_id = ?, last_user_id = ?, last_message = ?, subject = ?, status = ?, priority = ?, created_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, t.UserCreatedID, t.LastUserID, t.LastMessage, t.Subject, t.Status, t.Priority, t.CreatedAt, t.ID)
	_, err = db.Exec(sqlstr, t.UserCreatedID, t.LastUserID, t.LastMessage, t.Subject, t.Status, t.Priority, t.CreatedAt, t.ID)
	return err
}

// Save saves the Ticket to the database.
func (t *Ticket) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Delete deletes the Ticket from the database.
func (t *Ticket) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.ticket WHERE id = ?`

	// run query
	XOLog(sqlstr, t.ID)
	_, err = db.Exec(sqlstr, t.ID)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// TicketByID retrieves a row from 'v1wq1ics1m037sn6.ticket' as a Ticket.
//
// Generated from index 'ticket_id_pkey'.
func TicketByID(db XODB, id int) (*Ticket, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_created_id, last_user_id, last_message, subject, status, priority, created_at ` +
		`FROM v1wq1ics1m037sn6.ticket ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	t := Ticket{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&t.ID, &t.UserCreatedID, &t.LastUserID, &t.LastMessage, &t.Subject, &t.Status, &t.Priority, &t.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
