// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// RegistroHora represents a row from 'v1wq1ics1m037sn6.registro_horas'.
type RegistroHora struct {
	ID                    int           `json:"id"`                      // id
	ActividadID           sql.NullInt64 `json:"actividad_id"`            // actividad_id
	ClienteID             sql.NullInt64 `json:"cliente_id"`              // cliente_id
	IngresadoPorID        sql.NullInt64 `json:"ingresado_por_id"`        // ingresado_por_id
	ProyectoPresupuestoID sql.NullInt64 `json:"proyecto_presupuesto_id"` // proyecto_presupuesto_id
	FechaHoras            time.Time     `json:"fecha_horas"`             // fecha_horas
	HorasInvertidas       float64       `json:"horas_invertidas"`        // horas_invertidas
	FechaCreacion         time.Time     `json:"fecha_creacion"`          // fecha_creacion
	Aprobado              bool          `json:"aprobado"`                // aprobado
	HorasExtraordinarias  bool          `json:"horas_extraordinarias"`   // horas_extraordinarias
	CreadoPorID           sql.NullInt64 `json:"creado_por_id"`           // creado_por_id
	ActualizadoPorID      sql.NullInt64 `json:"actualizado_por_id"`      // actualizado_por_id
	FechaActualizacion    time.Time     `json:"fecha_actualizacion"`     // fecha_actualizacion

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RegistroHora exists in the database.
func (rh *RegistroHora) Exists() bool {
	return rh._exists
}

// Deleted provides information if the RegistroHora has been deleted from the database.
func (rh *RegistroHora) Deleted() bool {
	return rh._deleted
}

// Insert inserts the RegistroHora to the database.
func (rh *RegistroHora) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if rh._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.registro_horas (` +
		`actividad_id, cliente_id, ingresado_por_id, proyecto_presupuesto_id, fecha_horas, horas_invertidas, fecha_creacion, aprobado, horas_extraordinarias, creado_por_id, actualizado_por_id, fecha_actualizacion` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, rh.ActividadID, rh.ClienteID, rh.IngresadoPorID, rh.ProyectoPresupuestoID, rh.FechaHoras, rh.HorasInvertidas, rh.FechaCreacion, rh.Aprobado, rh.HorasExtraordinarias, rh.CreadoPorID, rh.ActualizadoPorID, rh.FechaActualizacion)
	res, err := db.Exec(sqlstr, rh.ActividadID, rh.ClienteID, rh.IngresadoPorID, rh.ProyectoPresupuestoID, rh.FechaHoras, rh.HorasInvertidas, rh.FechaCreacion, rh.Aprobado, rh.HorasExtraordinarias, rh.CreadoPorID, rh.ActualizadoPorID, rh.FechaActualizacion)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	rh.ID = int(id)
	rh._exists = true

	return nil
}

// Update updates the RegistroHora in the database.
func (rh *RegistroHora) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rh._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if rh._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.registro_horas SET ` +
		`actividad_id = ?, cliente_id = ?, ingresado_por_id = ?, proyecto_presupuesto_id = ?, fecha_horas = ?, horas_invertidas = ?, fecha_creacion = ?, aprobado = ?, horas_extraordinarias = ?, creado_por_id = ?, actualizado_por_id = ?, fecha_actualizacion = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, rh.ActividadID, rh.ClienteID, rh.IngresadoPorID, rh.ProyectoPresupuestoID, rh.FechaHoras, rh.HorasInvertidas, rh.FechaCreacion, rh.Aprobado, rh.HorasExtraordinarias, rh.CreadoPorID, rh.ActualizadoPorID, rh.FechaActualizacion, rh.ID)
	_, err = db.Exec(sqlstr, rh.ActividadID, rh.ClienteID, rh.IngresadoPorID, rh.ProyectoPresupuestoID, rh.FechaHoras, rh.HorasInvertidas, rh.FechaCreacion, rh.Aprobado, rh.HorasExtraordinarias, rh.CreadoPorID, rh.ActualizadoPorID, rh.FechaActualizacion, rh.ID)
	return err
}

// Save saves the RegistroHora to the database.
func (rh *RegistroHora) Save(db XODB) error {
	if rh.Exists() {
		return rh.Update(db)
	}

	return rh.Insert(db)
}

// Delete deletes the RegistroHora from the database.
func (rh *RegistroHora) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rh._exists {
		return nil
	}

	// if deleted, bail
	if rh._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.registro_horas WHERE id = ?`

	// run query
	XOLog(sqlstr, rh.ID)
	_, err = db.Exec(sqlstr, rh.ID)
	if err != nil {
		return err
	}

	// set deleted
	rh._deleted = true

	return nil
}

// Actividad returns the Actividad associated with the RegistroHora's ActividadID (actividad_id).
//
// Generated from foreign key 'FK_48CFEB5E6014FACA'.
func (rh *RegistroHora) Actividad(db XODB) (*Actividad, error) {
	return ActividadByID(db, int(rh.ActividadID.Int64))
}

// ProyectoPresupuesto returns the ProyectoPresupuesto associated with the RegistroHora's ProyectoPresupuestoID (proyecto_presupuesto_id).
//
// Generated from foreign key 'FK_48CFEB5ECA2E147C'.
func (rh *RegistroHora) ProyectoPresupuesto(db XODB) (*ProyectoPresupuesto, error) {
	return ProyectoPresupuestoByID(db, int(rh.ProyectoPresupuestoID.Int64))
}

// Cliente returns the Cliente associated with the RegistroHora's ClienteID (cliente_id).
//
// Generated from foreign key 'FK_48CFEB5EDE734E51'.
func (rh *RegistroHora) Cliente(db XODB) (*Cliente, error) {
	return ClienteByID(db, int(rh.ClienteID.Int64))
}

// UsuarioTrabajador returns the UsuarioTrabajador associated with the RegistroHora's IngresadoPorID (ingresado_por_id).
//
// Generated from foreign key 'FK_48CFEB5EE8CF5B91'.
func (rh *RegistroHora) UsuarioTrabajador(db XODB) (*UsuarioTrabajador, error) {
	return UsuarioTrabajadorByID(db, int(rh.IngresadoPorID.Int64))
}

// CodigoUsuarioByActualizadoPorID returns the CodigoUsuario associated with the RegistroHora's ActualizadoPorID (actualizado_por_id).
//
// Generated from foreign key 'FK_48CFEB5EF6167A1C'.
func (rh *RegistroHora) CodigoUsuarioByActualizadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(rh.ActualizadoPorID.Int64))
}

// CodigoUsuarioByCreadoPorID returns the CodigoUsuario associated with the RegistroHora's CreadoPorID (creado_por_id).
//
// Generated from foreign key 'FK_48CFEB5EFE35D8C4'.
func (rh *RegistroHora) CodigoUsuarioByCreadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(rh.CreadoPorID.Int64))
}

// RegistroHorasByActividadID retrieves a row from 'v1wq1ics1m037sn6.registro_horas' as a RegistroHora.
//
// Generated from index 'IDX_48CFEB5E6014FACA'.
func RegistroHorasByActividadID(db XODB, actividadID sql.NullInt64) ([]*RegistroHora, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, actividad_id, cliente_id, ingresado_por_id, proyecto_presupuesto_id, fecha_horas, horas_invertidas, fecha_creacion, aprobado, horas_extraordinarias, creado_por_id, actualizado_por_id, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.registro_horas ` +
		`WHERE actividad_id = ?`

	// run query
	XOLog(sqlstr, actividadID)
	q, err := db.Query(sqlstr, actividadID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHora{}
	for q.Next() {
		rh := RegistroHora{
			_exists: true,
		}

		// scan
		err = q.Scan(&rh.ID, &rh.ActividadID, &rh.ClienteID, &rh.IngresadoPorID, &rh.ProyectoPresupuestoID, &rh.FechaHoras, &rh.HorasInvertidas, &rh.FechaCreacion, &rh.Aprobado, &rh.HorasExtraordinarias, &rh.CreadoPorID, &rh.ActualizadoPorID, &rh.FechaActualizacion)
		if err != nil {
			return nil, err
		}

		res = append(res, &rh)
	}

	return res, nil
}

// RegistroHorasByProyectoPresupuestoID retrieves a row from 'v1wq1ics1m037sn6.registro_horas' as a RegistroHora.
//
// Generated from index 'IDX_48CFEB5ECA2E147C'.
func RegistroHorasByProyectoPresupuestoID(db XODB, proyectoPresupuestoID sql.NullInt64) ([]*RegistroHora, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, actividad_id, cliente_id, ingresado_por_id, proyecto_presupuesto_id, fecha_horas, horas_invertidas, fecha_creacion, aprobado, horas_extraordinarias, creado_por_id, actualizado_por_id, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.registro_horas ` +
		`WHERE proyecto_presupuesto_id = ?`

	// run query
	XOLog(sqlstr, proyectoPresupuestoID)
	q, err := db.Query(sqlstr, proyectoPresupuestoID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHora{}
	for q.Next() {
		rh := RegistroHora{
			_exists: true,
		}

		// scan
		err = q.Scan(&rh.ID, &rh.ActividadID, &rh.ClienteID, &rh.IngresadoPorID, &rh.ProyectoPresupuestoID, &rh.FechaHoras, &rh.HorasInvertidas, &rh.FechaCreacion, &rh.Aprobado, &rh.HorasExtraordinarias, &rh.CreadoPorID, &rh.ActualizadoPorID, &rh.FechaActualizacion)
		if err != nil {
			return nil, err
		}

		res = append(res, &rh)
	}

	return res, nil
}

// RegistroHorasByClienteID retrieves a row from 'v1wq1ics1m037sn6.registro_horas' as a RegistroHora.
//
// Generated from index 'IDX_48CFEB5EDE734E51'.
func RegistroHorasByClienteID(db XODB, clienteID sql.NullInt64) ([]*RegistroHora, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, actividad_id, cliente_id, ingresado_por_id, proyecto_presupuesto_id, fecha_horas, horas_invertidas, fecha_creacion, aprobado, horas_extraordinarias, creado_por_id, actualizado_por_id, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.registro_horas ` +
		`WHERE cliente_id = ?`

	// run query
	XOLog(sqlstr, clienteID)
	q, err := db.Query(sqlstr, clienteID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHora{}
	for q.Next() {
		rh := RegistroHora{
			_exists: true,
		}

		// scan
		err = q.Scan(&rh.ID, &rh.ActividadID, &rh.ClienteID, &rh.IngresadoPorID, &rh.ProyectoPresupuestoID, &rh.FechaHoras, &rh.HorasInvertidas, &rh.FechaCreacion, &rh.Aprobado, &rh.HorasExtraordinarias, &rh.CreadoPorID, &rh.ActualizadoPorID, &rh.FechaActualizacion)
		if err != nil {
			return nil, err
		}

		res = append(res, &rh)
	}

	return res, nil
}

// RegistroHorasByIngresadoPorID retrieves a row from 'v1wq1ics1m037sn6.registro_horas' as a RegistroHora.
//
// Generated from index 'IDX_48CFEB5EE8CF5B91'.
func RegistroHorasByIngresadoPorID(db XODB, ingresadoPorID sql.NullInt64) ([]*RegistroHora, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, actividad_id, cliente_id, ingresado_por_id, proyecto_presupuesto_id, fecha_horas, horas_invertidas, fecha_creacion, aprobado, horas_extraordinarias, creado_por_id, actualizado_por_id, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.registro_horas ` +
		`WHERE ingresado_por_id = ?`

	// run query
	XOLog(sqlstr, ingresadoPorID)
	q, err := db.Query(sqlstr, ingresadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHora{}
	for q.Next() {
		rh := RegistroHora{
			_exists: true,
		}

		// scan
		err = q.Scan(&rh.ID, &rh.ActividadID, &rh.ClienteID, &rh.IngresadoPorID, &rh.ProyectoPresupuestoID, &rh.FechaHoras, &rh.HorasInvertidas, &rh.FechaCreacion, &rh.Aprobado, &rh.HorasExtraordinarias, &rh.CreadoPorID, &rh.ActualizadoPorID, &rh.FechaActualizacion)
		if err != nil {
			return nil, err
		}

		res = append(res, &rh)
	}

	return res, nil
}

// RegistroHorasByActualizadoPorID retrieves a row from 'v1wq1ics1m037sn6.registro_horas' as a RegistroHora.
//
// Generated from index 'IDX_48CFEB5EF6167A1C'.
func RegistroHorasByActualizadoPorID(db XODB, actualizadoPorID sql.NullInt64) ([]*RegistroHora, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, actividad_id, cliente_id, ingresado_por_id, proyecto_presupuesto_id, fecha_horas, horas_invertidas, fecha_creacion, aprobado, horas_extraordinarias, creado_por_id, actualizado_por_id, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.registro_horas ` +
		`WHERE actualizado_por_id = ?`

	// run query
	XOLog(sqlstr, actualizadoPorID)
	q, err := db.Query(sqlstr, actualizadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHora{}
	for q.Next() {
		rh := RegistroHora{
			_exists: true,
		}

		// scan
		err = q.Scan(&rh.ID, &rh.ActividadID, &rh.ClienteID, &rh.IngresadoPorID, &rh.ProyectoPresupuestoID, &rh.FechaHoras, &rh.HorasInvertidas, &rh.FechaCreacion, &rh.Aprobado, &rh.HorasExtraordinarias, &rh.CreadoPorID, &rh.ActualizadoPorID, &rh.FechaActualizacion)
		if err != nil {
			return nil, err
		}

		res = append(res, &rh)
	}

	return res, nil
}

// RegistroHorasByCreadoPorID retrieves a row from 'v1wq1ics1m037sn6.registro_horas' as a RegistroHora.
//
// Generated from index 'IDX_48CFEB5EFE35D8C4'.
func RegistroHorasByCreadoPorID(db XODB, creadoPorID sql.NullInt64) ([]*RegistroHora, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, actividad_id, cliente_id, ingresado_por_id, proyecto_presupuesto_id, fecha_horas, horas_invertidas, fecha_creacion, aprobado, horas_extraordinarias, creado_por_id, actualizado_por_id, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.registro_horas ` +
		`WHERE creado_por_id = ?`

	// run query
	XOLog(sqlstr, creadoPorID)
	q, err := db.Query(sqlstr, creadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistroHora{}
	for q.Next() {
		rh := RegistroHora{
			_exists: true,
		}

		// scan
		err = q.Scan(&rh.ID, &rh.ActividadID, &rh.ClienteID, &rh.IngresadoPorID, &rh.ProyectoPresupuestoID, &rh.FechaHoras, &rh.HorasInvertidas, &rh.FechaCreacion, &rh.Aprobado, &rh.HorasExtraordinarias, &rh.CreadoPorID, &rh.ActualizadoPorID, &rh.FechaActualizacion)
		if err != nil {
			return nil, err
		}

		res = append(res, &rh)
	}

	return res, nil
}

// RegistroHoraByID retrieves a row from 'v1wq1ics1m037sn6.registro_horas' as a RegistroHora.
//
// Generated from index 'registro_horas_id_pkey'.
func RegistroHoraByID(db XODB, id int) (*RegistroHora, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, actividad_id, cliente_id, ingresado_por_id, proyecto_presupuesto_id, fecha_horas, horas_invertidas, fecha_creacion, aprobado, horas_extraordinarias, creado_por_id, actualizado_por_id, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.registro_horas ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	rh := RegistroHora{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&rh.ID, &rh.ActividadID, &rh.ClienteID, &rh.IngresadoPorID, &rh.ProyectoPresupuestoID, &rh.FechaHoras, &rh.HorasInvertidas, &rh.FechaCreacion, &rh.Aprobado, &rh.HorasExtraordinarias, &rh.CreadoPorID, &rh.ActualizadoPorID, &rh.FechaActualizacion)
	if err != nil {
		return nil, err
	}

	return &rh, nil
}
