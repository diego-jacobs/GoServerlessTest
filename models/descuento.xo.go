// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Descuento represents a row from 'v1wq1ics1m037sn6.descuento'.
type Descuento struct {
	ID              int           `json:"id"`                // id
	PrestacionesID  sql.NullInt64 `json:"prestaciones_id"`   // prestaciones_id
	Nombredescuento string        `json:"nombreDescuento"`   // nombreDescuento
	Monto           float64       `json:"monto"`             // monto
	TipoDescuentoID sql.NullInt64 `json:"tipo_descuento_id"` // tipo_descuento_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Descuento exists in the database.
func (d *Descuento) Exists() bool {
	return d._exists
}

// Deleted provides information if the Descuento has been deleted from the database.
func (d *Descuento) Deleted() bool {
	return d._deleted
}

// Insert inserts the Descuento to the database.
func (d *Descuento) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if d._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.descuento (` +
		`prestaciones_id, nombreDescuento, monto, tipo_descuento_id` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, d.PrestacionesID, d.Nombredescuento, d.Monto, d.TipoDescuentoID)
	res, err := db.Exec(sqlstr, d.PrestacionesID, d.Nombredescuento, d.Monto, d.TipoDescuentoID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	d.ID = int(id)
	d._exists = true

	return nil
}

// Update updates the Descuento in the database.
func (d *Descuento) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if d._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.descuento SET ` +
		`prestaciones_id = ?, nombreDescuento = ?, monto = ?, tipo_descuento_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, d.PrestacionesID, d.Nombredescuento, d.Monto, d.TipoDescuentoID, d.ID)
	_, err = db.Exec(sqlstr, d.PrestacionesID, d.Nombredescuento, d.Monto, d.TipoDescuentoID, d.ID)
	return err
}

// Save saves the Descuento to the database.
func (d *Descuento) Save(db XODB) error {
	if d.Exists() {
		return d.Update(db)
	}

	return d.Insert(db)
}

// Delete deletes the Descuento from the database.
func (d *Descuento) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return nil
	}

	// if deleted, bail
	if d._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.descuento WHERE id = ?`

	// run query
	XOLog(sqlstr, d.ID)
	_, err = db.Exec(sqlstr, d.ID)
	if err != nil {
		return err
	}

	// set deleted
	d._deleted = true

	return nil
}

// TipoDescuento returns the TipoDescuento associated with the Descuento's TipoDescuentoID (tipo_descuento_id).
//
// Generated from foreign key 'FK_C5B093044316597C'.
func (d *Descuento) TipoDescuento(db XODB) (*TipoDescuento, error) {
	return TipoDescuentoByID(db, int(d.TipoDescuentoID.Int64))
}

// DatosPrestacione returns the DatosPrestacione associated with the Descuento's PrestacionesID (prestaciones_id).
//
// Generated from foreign key 'FK_C5B09304BE4A656F'.
func (d *Descuento) DatosPrestacione(db XODB) (*DatosPrestacione, error) {
	return DatosPrestacioneByID(db, int(d.PrestacionesID.Int64))
}

// DescuentosByTipoDescuentoID retrieves a row from 'v1wq1ics1m037sn6.descuento' as a Descuento.
//
// Generated from index 'IDX_C5B093044316597C'.
func DescuentosByTipoDescuentoID(db XODB, tipoDescuentoID sql.NullInt64) ([]*Descuento, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, prestaciones_id, nombreDescuento, monto, tipo_descuento_id ` +
		`FROM v1wq1ics1m037sn6.descuento ` +
		`WHERE tipo_descuento_id = ?`

	// run query
	XOLog(sqlstr, tipoDescuentoID)
	q, err := db.Query(sqlstr, tipoDescuentoID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Descuento{}
	for q.Next() {
		d := Descuento{
			_exists: true,
		}

		// scan
		err = q.Scan(&d.ID, &d.PrestacionesID, &d.Nombredescuento, &d.Monto, &d.TipoDescuentoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &d)
	}

	return res, nil
}

// DescuentosByPrestacionesID retrieves a row from 'v1wq1ics1m037sn6.descuento' as a Descuento.
//
// Generated from index 'IDX_C5B09304BE4A656F'.
func DescuentosByPrestacionesID(db XODB, prestacionesID sql.NullInt64) ([]*Descuento, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, prestaciones_id, nombreDescuento, monto, tipo_descuento_id ` +
		`FROM v1wq1ics1m037sn6.descuento ` +
		`WHERE prestaciones_id = ?`

	// run query
	XOLog(sqlstr, prestacionesID)
	q, err := db.Query(sqlstr, prestacionesID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Descuento{}
	for q.Next() {
		d := Descuento{
			_exists: true,
		}

		// scan
		err = q.Scan(&d.ID, &d.PrestacionesID, &d.Nombredescuento, &d.Monto, &d.TipoDescuentoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &d)
	}

	return res, nil
}

// DescuentoByID retrieves a row from 'v1wq1ics1m037sn6.descuento' as a Descuento.
//
// Generated from index 'descuento_id_pkey'.
func DescuentoByID(db XODB, id int) (*Descuento, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, prestaciones_id, nombreDescuento, monto, tipo_descuento_id ` +
		`FROM v1wq1ics1m037sn6.descuento ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	d := Descuento{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&d.ID, &d.PrestacionesID, &d.Nombredescuento, &d.Monto, &d.TipoDescuentoID)
	if err != nil {
		return nil, err
	}

	return &d, nil
}
