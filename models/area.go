// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Area represents a row from 'v1wq1ics1m037sn6.area'.
type Area struct {
	ID                 int           `json:"id"`                  // id
	CreadoPorID        sql.NullInt64 `json:"creado_por_id"`       // creado_por_id
	ActualizadoPorID   sql.NullInt64 `json:"actualizado_por_id"`  // actualizado_por_id
	Nombre             string        `json:"nombre"`              // nombre
	FechaCreacion      time.Time     `json:"fecha_creacion"`      // fecha_creacion
	FechaActualizacion time.Time     `json:"fecha_actualizacion"` // fecha_actualizacion
	DepartamentoID     sql.NullInt64 `json:"departamento_id"`     // departamento_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Area exists in the database.
func (a *Area) Exists() bool {
	return a._exists
}

// Deleted provides information if the Area has been deleted from the database.
func (a *Area) Deleted() bool {
	return a._deleted
}

// Insert inserts the Area to the database.
func (a *Area) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.area (` +
		`creado_por_id, actualizado_por_id, nombre, fecha_creacion, fecha_actualizacion, departamento_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, a.CreadoPorID, a.ActualizadoPorID, a.Nombre, a.FechaCreacion, a.FechaActualizacion, a.DepartamentoID)
	res, err := db.Exec(sqlstr, a.CreadoPorID, a.ActualizadoPorID, a.Nombre, a.FechaCreacion, a.FechaActualizacion, a.DepartamentoID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = int(id)
	a._exists = true

	return nil
}

// Update updates the Area in the database.
func (a *Area) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.area SET ` +
		`creado_por_id = ?, actualizado_por_id = ?, nombre = ?, fecha_creacion = ?, fecha_actualizacion = ?, departamento_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, a.CreadoPorID, a.ActualizadoPorID, a.Nombre, a.FechaCreacion, a.FechaActualizacion, a.DepartamentoID, a.ID)
	_, err = db.Exec(sqlstr, a.CreadoPorID, a.ActualizadoPorID, a.Nombre, a.FechaCreacion, a.FechaActualizacion, a.DepartamentoID, a.ID)
	return err
}

// Save saves the Area to the database.
func (a *Area) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Area from the database.
func (a *Area) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.area WHERE id = ?`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// Departamento returns the Departamento associated with the Area's DepartamentoID (departamento_id).
//
// Generated from foreign key 'FK_D7943D685A91C08D'.
func (a *Area) Departamento(db XODB) (*Departamento, error) {
	return DepartamentoByID(db, int(a.DepartamentoID.Int64))
}

// CodigoUsuarioByActualizadoPorID returns the CodigoUsuario associated with the Area's ActualizadoPorID (actualizado_por_id).
//
// Generated from foreign key 'FK_D7943D68F6167A1C'.
func (a *Area) CodigoUsuarioByActualizadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(a.ActualizadoPorID.Int64))
}

// CodigoUsuarioByCreadoPorID returns the CodigoUsuario associated with the Area's CreadoPorID (creado_por_id).
//
// Generated from foreign key 'FK_D7943D68FE35D8C4'.
func (a *Area) CodigoUsuarioByCreadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(a.CreadoPorID.Int64))
}

// AreasByDepartamentoID retrieves a row from 'v1wq1ics1m037sn6.area' as a Area.
//
// Generated from index 'IDX_D7943D685A91C08D'.
func AreasByDepartamentoID(db XODB, departamentoID sql.NullInt64) ([]*Area, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, creado_por_id, actualizado_por_id, nombre, fecha_creacion, fecha_actualizacion, departamento_id ` +
		`FROM v1wq1ics1m037sn6.area ` +
		`WHERE departamento_id = ?`

	// run query
	XOLog(sqlstr, departamentoID)
	q, err := db.Query(sqlstr, departamentoID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Area{}
	for q.Next() {
		a := Area{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.CreadoPorID, &a.ActualizadoPorID, &a.Nombre, &a.FechaCreacion, &a.FechaActualizacion, &a.DepartamentoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AreasByActualizadoPorID retrieves a row from 'v1wq1ics1m037sn6.area' as a Area.
//
// Generated from index 'IDX_D7943D68F6167A1C'.
func AreasByActualizadoPorID(db XODB, actualizadoPorID sql.NullInt64) ([]*Area, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, creado_por_id, actualizado_por_id, nombre, fecha_creacion, fecha_actualizacion, departamento_id ` +
		`FROM v1wq1ics1m037sn6.area ` +
		`WHERE actualizado_por_id = ?`

	// run query
	XOLog(sqlstr, actualizadoPorID)
	q, err := db.Query(sqlstr, actualizadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Area{}
	for q.Next() {
		a := Area{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.CreadoPorID, &a.ActualizadoPorID, &a.Nombre, &a.FechaCreacion, &a.FechaActualizacion, &a.DepartamentoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AreasByCreadoPorID retrieves a row from 'v1wq1ics1m037sn6.area' as a Area.
//
// Generated from index 'IDX_D7943D68FE35D8C4'.
func AreasByCreadoPorID(db XODB, creadoPorID sql.NullInt64) ([]*Area, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, creado_por_id, actualizado_por_id, nombre, fecha_creacion, fecha_actualizacion, departamento_id ` +
		`FROM v1wq1ics1m037sn6.area ` +
		`WHERE creado_por_id = ?`

	// run query
	XOLog(sqlstr, creadoPorID)
	q, err := db.Query(sqlstr, creadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Area{}
	for q.Next() {
		a := Area{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.CreadoPorID, &a.ActualizadoPorID, &a.Nombre, &a.FechaCreacion, &a.FechaActualizacion, &a.DepartamentoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AreaByID retrieves a row from 'v1wq1ics1m037sn6.area' as a Area.
//
// Generated from index 'area_id_pkey'.
func AreaByID(db XODB, id int) (*Area, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, creado_por_id, actualizado_por_id, nombre, fecha_creacion, fecha_actualizacion, departamento_id ` +
		`FROM v1wq1ics1m037sn6.area ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	a := Area{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.CreadoPorID, &a.ActualizadoPorID, &a.Nombre, &a.FechaCreacion, &a.FechaActualizacion, &a.DepartamentoID)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
