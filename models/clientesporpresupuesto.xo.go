// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// ClientesPorPresupuesto represents a row from 'v1wq1ics1m037sn6.clientes_por_presupuesto'.
type ClientesPorPresupuesto struct {
	ClienteID     int `json:"cliente_id"`     // cliente_id
	PresupuestoID int `json:"presupuesto_id"` // presupuesto_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ClientesPorPresupuesto exists in the database.
func (cpp *ClientesPorPresupuesto) Exists() bool {
	return cpp._exists
}

// Deleted provides information if the ClientesPorPresupuesto has been deleted from the database.
func (cpp *ClientesPorPresupuesto) Deleted() bool {
	return cpp._deleted
}

// Insert inserts the ClientesPorPresupuesto to the database.
func (cpp *ClientesPorPresupuesto) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cpp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.clientes_por_presupuesto (` +
		`cliente_id, presupuesto_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cpp.ClienteID, cpp.PresupuestoID)
	_, err = db.Exec(sqlstr, cpp.ClienteID, cpp.PresupuestoID)
	if err != nil {
		return err
	}

	// set existence
	cpp._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the ClientesPorPresupuesto from the database.
func (cpp *ClientesPorPresupuesto) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cpp._exists {
		return nil
	}

	// if deleted, bail
	if cpp._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.clientes_por_presupuesto WHERE cliente_id = ? AND presupuesto_id = ?`

	// run query
	XOLog(sqlstr, cpp.ClienteID, cpp.PresupuestoID)
	_, err = db.Exec(sqlstr, cpp.ClienteID, cpp.PresupuestoID)
	if err != nil {
		return err
	}

	// set deleted
	cpp._deleted = true

	return nil
}

// Cliente returns the Cliente associated with the ClientesPorPresupuesto's PresupuestoID (presupuesto_id).
//
// Generated from foreign key 'FK_CBEF3C5C90119F0F'.
func (cpp *ClientesPorPresupuesto) Cliente(db XODB) (*Cliente, error) {
	return ClienteByID(db, cpp.PresupuestoID)
}

// ProyectoPresupuesto returns the ProyectoPresupuesto associated with the ClientesPorPresupuesto's ClienteID (cliente_id).
//
// Generated from foreign key 'FK_CBEF3C5CDE734E51'.
func (cpp *ClientesPorPresupuesto) ProyectoPresupuesto(db XODB) (*ProyectoPresupuesto, error) {
	return ProyectoPresupuestoByID(db, cpp.ClienteID)
}

// ClientesPorPresupuestosByPresupuestoID retrieves a row from 'v1wq1ics1m037sn6.clientes_por_presupuesto' as a ClientesPorPresupuesto.
//
// Generated from index 'IDX_CBEF3C5C90119F0F'.
func ClientesPorPresupuestosByPresupuestoID(db XODB, presupuestoID int) ([]*ClientesPorPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cliente_id, presupuesto_id ` +
		`FROM v1wq1ics1m037sn6.clientes_por_presupuesto ` +
		`WHERE presupuesto_id = ?`

	// run query
	XOLog(sqlstr, presupuestoID)
	q, err := db.Query(sqlstr, presupuestoID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ClientesPorPresupuesto{}
	for q.Next() {
		cpp := ClientesPorPresupuesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&cpp.ClienteID, &cpp.PresupuestoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &cpp)
	}

	return res, nil
}

// ClientesPorPresupuestosByClienteID retrieves a row from 'v1wq1ics1m037sn6.clientes_por_presupuesto' as a ClientesPorPresupuesto.
//
// Generated from index 'IDX_CBEF3C5CDE734E51'.
func ClientesPorPresupuestosByClienteID(db XODB, clienteID int) ([]*ClientesPorPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cliente_id, presupuesto_id ` +
		`FROM v1wq1ics1m037sn6.clientes_por_presupuesto ` +
		`WHERE cliente_id = ?`

	// run query
	XOLog(sqlstr, clienteID)
	q, err := db.Query(sqlstr, clienteID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ClientesPorPresupuesto{}
	for q.Next() {
		cpp := ClientesPorPresupuesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&cpp.ClienteID, &cpp.PresupuestoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &cpp)
	}

	return res, nil
}

// ClientesPorPresupuestoByPresupuestoID retrieves a row from 'v1wq1ics1m037sn6.clientes_por_presupuesto' as a ClientesPorPresupuesto.
//
// Generated from index 'clientes_por_presupuesto_presupuesto_id_pkey'.
func ClientesPorPresupuestoByPresupuestoID(db XODB, presupuestoID int) (*ClientesPorPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`cliente_id, presupuesto_id ` +
		`FROM v1wq1ics1m037sn6.clientes_por_presupuesto ` +
		`WHERE presupuesto_id = ?`

	// run query
	XOLog(sqlstr, presupuestoID)
	cpp := ClientesPorPresupuesto{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, presupuestoID).Scan(&cpp.ClienteID, &cpp.PresupuestoID)
	if err != nil {
		return nil, err
	}

	return &cpp, nil
}
