// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// TipoDescuento represents a row from 'v1wq1ics1m037sn6.tipo_descuento'.
type TipoDescuento struct {
	ID                  int       `json:"id"`                    // id
	NombreTipoDescuento string    `json:"nombre_tipo_descuento"` // nombre_tipo_descuento
	FechaCreacion       time.Time `json:"fecha_creacion"`        // fecha_creacion

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TipoDescuento exists in the database.
func (td *TipoDescuento) Exists() bool {
	return td._exists
}

// Deleted provides information if the TipoDescuento has been deleted from the database.
func (td *TipoDescuento) Deleted() bool {
	return td._deleted
}

// Insert inserts the TipoDescuento to the database.
func (td *TipoDescuento) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if td._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.tipo_descuento (` +
		`nombre_tipo_descuento, fecha_creacion` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, td.NombreTipoDescuento, td.FechaCreacion)
	res, err := db.Exec(sqlstr, td.NombreTipoDescuento, td.FechaCreacion)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	td.ID = int(id)
	td._exists = true

	return nil
}

// Update updates the TipoDescuento in the database.
func (td *TipoDescuento) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !td._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if td._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.tipo_descuento SET ` +
		`nombre_tipo_descuento = ?, fecha_creacion = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, td.NombreTipoDescuento, td.FechaCreacion, td.ID)
	_, err = db.Exec(sqlstr, td.NombreTipoDescuento, td.FechaCreacion, td.ID)
	return err
}

// Save saves the TipoDescuento to the database.
func (td *TipoDescuento) Save(db XODB) error {
	if td.Exists() {
		return td.Update(db)
	}

	return td.Insert(db)
}

// Delete deletes the TipoDescuento from the database.
func (td *TipoDescuento) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !td._exists {
		return nil
	}

	// if deleted, bail
	if td._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.tipo_descuento WHERE id = ?`

	// run query
	XOLog(sqlstr, td.ID)
	_, err = db.Exec(sqlstr, td.ID)
	if err != nil {
		return err
	}

	// set deleted
	td._deleted = true

	return nil
}

// TipoDescuentoByID retrieves a row from 'v1wq1ics1m037sn6.tipo_descuento' as a TipoDescuento.
//
// Generated from index 'tipo_descuento_id_pkey'.
func TipoDescuentoByID(db XODB, id int) (*TipoDescuento, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nombre_tipo_descuento, fecha_creacion ` +
		`FROM v1wq1ics1m037sn6.tipo_descuento ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	td := TipoDescuento{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&td.ID, &td.NombreTipoDescuento, &td.FechaCreacion)
	if err != nil {
		return nil, err
	}

	return &td, nil
}
