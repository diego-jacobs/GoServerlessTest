// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Cliente represents a row from 'v1wq1ics1m037sn6.cliente'.
type Cliente struct {
	ID                 int            `json:"id"`                  // id
	Nit                string         `json:"nit"`                 // nit
	RazonSocial        string         `json:"razon_social"`        // razon_social
	NombreComercial    sql.NullString `json:"nombre_comercial"`    // nombre_comercial
	ServiciosPrestados sql.NullString `json:"servicios_prestados"` // servicios_prestados
	CreadoPorID        sql.NullInt64  `json:"creado_por_id"`       // creado_por_id
	ActualizadoPorID   sql.NullInt64  `json:"actualizado_por_id"`  // actualizado_por_id
	FechaCreacion      time.Time      `json:"fecha_creacion"`      // fecha_creacion
	FechaActualizacion time.Time      `json:"fecha_actualizacion"` // fecha_actualizacion

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Cliente exists in the database.
func (c *Cliente) Exists() bool {
	return c._exists
}

// Deleted provides information if the Cliente has been deleted from the database.
func (c *Cliente) Deleted() bool {
	return c._deleted
}

// Insert inserts the Cliente to the database.
func (c *Cliente) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.cliente (` +
		`nit, razon_social, nombre_comercial, servicios_prestados, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.Nit, c.RazonSocial, c.NombreComercial, c.ServiciosPrestados, c.CreadoPorID, c.ActualizadoPorID, c.FechaCreacion, c.FechaActualizacion)
	res, err := db.Exec(sqlstr, c.Nit, c.RazonSocial, c.NombreComercial, c.ServiciosPrestados, c.CreadoPorID, c.ActualizadoPorID, c.FechaCreacion, c.FechaActualizacion)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.ID = int(id)
	c._exists = true

	return nil
}

// Update updates the Cliente in the database.
func (c *Cliente) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.cliente SET ` +
		`nit = ?, razon_social = ?, nombre_comercial = ?, servicios_prestados = ?, creado_por_id = ?, actualizado_por_id = ?, fecha_creacion = ?, fecha_actualizacion = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, c.Nit, c.RazonSocial, c.NombreComercial, c.ServiciosPrestados, c.CreadoPorID, c.ActualizadoPorID, c.FechaCreacion, c.FechaActualizacion, c.ID)
	_, err = db.Exec(sqlstr, c.Nit, c.RazonSocial, c.NombreComercial, c.ServiciosPrestados, c.CreadoPorID, c.ActualizadoPorID, c.FechaCreacion, c.FechaActualizacion, c.ID)
	return err
}

// Save saves the Cliente to the database.
func (c *Cliente) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Cliente from the database.
func (c *Cliente) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.cliente WHERE id = ?`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CodigoUsuarioByActualizadoPorID returns the CodigoUsuario associated with the Cliente's ActualizadoPorID (actualizado_por_id).
//
// Generated from foreign key 'FK_F41C9B25F6167A1C'.
func (c *Cliente) CodigoUsuarioByActualizadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(c.ActualizadoPorID.Int64))
}

// CodigoUsuarioByCreadoPorID returns the CodigoUsuario associated with the Cliente's CreadoPorID (creado_por_id).
//
// Generated from foreign key 'FK_F41C9B25FE35D8C4'.
func (c *Cliente) CodigoUsuarioByCreadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(c.CreadoPorID.Int64))
}

// ClientesByActualizadoPorID retrieves a row from 'v1wq1ics1m037sn6.cliente' as a Cliente.
//
// Generated from index 'IDX_F41C9B25F6167A1C'.
func ClientesByActualizadoPorID(db XODB, actualizadoPorID sql.NullInt64) ([]*Cliente, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nit, razon_social, nombre_comercial, servicios_prestados, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.cliente ` +
		`WHERE actualizado_por_id = ?`

	// run query
	XOLog(sqlstr, actualizadoPorID)
	q, err := db.Query(sqlstr, actualizadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Cliente{}
	for q.Next() {
		c := Cliente{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.ID, &c.Nit, &c.RazonSocial, &c.NombreComercial, &c.ServiciosPrestados, &c.CreadoPorID, &c.ActualizadoPorID, &c.FechaCreacion, &c.FechaActualizacion)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// ClientesByCreadoPorID retrieves a row from 'v1wq1ics1m037sn6.cliente' as a Cliente.
//
// Generated from index 'IDX_F41C9B25FE35D8C4'.
func ClientesByCreadoPorID(db XODB, creadoPorID sql.NullInt64) ([]*Cliente, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nit, razon_social, nombre_comercial, servicios_prestados, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.cliente ` +
		`WHERE creado_por_id = ?`

	// run query
	XOLog(sqlstr, creadoPorID)
	q, err := db.Query(sqlstr, creadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Cliente{}
	for q.Next() {
		c := Cliente{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.ID, &c.Nit, &c.RazonSocial, &c.NombreComercial, &c.ServiciosPrestados, &c.CreadoPorID, &c.ActualizadoPorID, &c.FechaCreacion, &c.FechaActualizacion)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// ClienteByNit retrieves a row from 'v1wq1ics1m037sn6.cliente' as a Cliente.
//
// Generated from index 'UNIQ_F41C9B255E5F5AF3'.
func ClienteByNit(db XODB, nit string) (*Cliente, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nit, razon_social, nombre_comercial, servicios_prestados, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.cliente ` +
		`WHERE nit = ?`

	// run query
	XOLog(sqlstr, nit)
	c := Cliente{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, nit).Scan(&c.ID, &c.Nit, &c.RazonSocial, &c.NombreComercial, &c.ServiciosPrestados, &c.CreadoPorID, &c.ActualizadoPorID, &c.FechaCreacion, &c.FechaActualizacion)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// ClienteByID retrieves a row from 'v1wq1ics1m037sn6.cliente' as a Cliente.
//
// Generated from index 'cliente_id_pkey'.
func ClienteByID(db XODB, id int) (*Cliente, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nit, razon_social, nombre_comercial, servicios_prestados, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion ` +
		`FROM v1wq1ics1m037sn6.cliente ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	c := Cliente{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.Nit, &c.RazonSocial, &c.NombreComercial, &c.ServiciosPrestados, &c.CreadoPorID, &c.ActualizadoPorID, &c.FechaCreacion, &c.FechaActualizacion)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
