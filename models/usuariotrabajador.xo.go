// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// UsuarioTrabajador represents a row from 'v1wq1ics1m037sn6.usuario_trabajador'.
type UsuarioTrabajador struct {
	ID                   int            `json:"id"`                     // id
	Direccion            sql.NullString `json:"direccion"`              // direccion
	FechaEgreso          mysql.NullTime `json:"fecha_egreso"`           // fecha_egreso
	Dpi                  sql.NullString `json:"dpi"`                    // dpi
	Nit                  sql.NullString `json:"nit"`                    // nit
	Telefono             sql.NullString `json:"telefono"`               // telefono
	NumeroAfiliacionIgss sql.NullString `json:"numero_afiliacion_igss"` // numero_afiliacion_igss

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UsuarioTrabajador exists in the database.
func (ut *UsuarioTrabajador) Exists() bool {
	return ut._exists
}

// Deleted provides information if the UsuarioTrabajador has been deleted from the database.
func (ut *UsuarioTrabajador) Deleted() bool {
	return ut._deleted
}

// Insert inserts the UsuarioTrabajador to the database.
func (ut *UsuarioTrabajador) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ut._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.usuario_trabajador (` +
		`id, direccion, fecha_egreso, dpi, nit, telefono, numero_afiliacion_igss` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ut.ID, ut.Direccion, ut.FechaEgreso, ut.Dpi, ut.Nit, ut.Telefono, ut.NumeroAfiliacionIgss)
	_, err = db.Exec(sqlstr, ut.ID, ut.Direccion, ut.FechaEgreso, ut.Dpi, ut.Nit, ut.Telefono, ut.NumeroAfiliacionIgss)
	if err != nil {
		return err
	}

	// set existence
	ut._exists = true

	return nil
}

// Update updates the UsuarioTrabajador in the database.
func (ut *UsuarioTrabajador) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ut._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ut._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.usuario_trabajador SET ` +
		`direccion = ?, fecha_egreso = ?, dpi = ?, nit = ?, telefono = ?, numero_afiliacion_igss = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ut.Direccion, ut.FechaEgreso, ut.Dpi, ut.Nit, ut.Telefono, ut.NumeroAfiliacionIgss, ut.ID)
	_, err = db.Exec(sqlstr, ut.Direccion, ut.FechaEgreso, ut.Dpi, ut.Nit, ut.Telefono, ut.NumeroAfiliacionIgss, ut.ID)
	return err
}

// Save saves the UsuarioTrabajador to the database.
func (ut *UsuarioTrabajador) Save(db XODB) error {
	if ut.Exists() {
		return ut.Update(db)
	}

	return ut.Insert(db)
}

// Delete deletes the UsuarioTrabajador from the database.
func (ut *UsuarioTrabajador) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ut._exists {
		return nil
	}

	// if deleted, bail
	if ut._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.usuario_trabajador WHERE id = ?`

	// run query
	XOLog(sqlstr, ut.ID)
	_, err = db.Exec(sqlstr, ut.ID)
	if err != nil {
		return err
	}

	// set deleted
	ut._deleted = true

	return nil
}

// Usuario returns the Usuario associated with the UsuarioTrabajador's ID (id).
//
// Generated from foreign key 'FK_B125367DBF396750'.
func (ut *UsuarioTrabajador) Usuario(db XODB) (*Usuario, error) {
	return UsuarioByID(db, ut.ID)
}

// UsuarioTrabajadorByNit retrieves a row from 'v1wq1ics1m037sn6.usuario_trabajador' as a UsuarioTrabajador.
//
// Generated from index 'UNIQ_B125367D5E5F5AF3'.
func UsuarioTrabajadorByNit(db XODB, nit sql.NullString) (*UsuarioTrabajador, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, direccion, fecha_egreso, dpi, nit, telefono, numero_afiliacion_igss ` +
		`FROM v1wq1ics1m037sn6.usuario_trabajador ` +
		`WHERE nit = ?`

	// run query
	XOLog(sqlstr, nit)
	ut := UsuarioTrabajador{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, nit).Scan(&ut.ID, &ut.Direccion, &ut.FechaEgreso, &ut.Dpi, &ut.Nit, &ut.Telefono, &ut.NumeroAfiliacionIgss)
	if err != nil {
		return nil, err
	}

	return &ut, nil
}

// UsuarioTrabajadorByDpi retrieves a row from 'v1wq1ics1m037sn6.usuario_trabajador' as a UsuarioTrabajador.
//
// Generated from index 'UNIQ_B125367DABCE1AE4'.
func UsuarioTrabajadorByDpi(db XODB, dpi sql.NullString) (*UsuarioTrabajador, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, direccion, fecha_egreso, dpi, nit, telefono, numero_afiliacion_igss ` +
		`FROM v1wq1ics1m037sn6.usuario_trabajador ` +
		`WHERE dpi = ?`

	// run query
	XOLog(sqlstr, dpi)
	ut := UsuarioTrabajador{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, dpi).Scan(&ut.ID, &ut.Direccion, &ut.FechaEgreso, &ut.Dpi, &ut.Nit, &ut.Telefono, &ut.NumeroAfiliacionIgss)
	if err != nil {
		return nil, err
	}

	return &ut, nil
}

// UsuarioTrabajadorByID retrieves a row from 'v1wq1ics1m037sn6.usuario_trabajador' as a UsuarioTrabajador.
//
// Generated from index 'usuario_trabajador_id_pkey'.
func UsuarioTrabajadorByID(db XODB, id int) (*UsuarioTrabajador, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, direccion, fecha_egreso, dpi, nit, telefono, numero_afiliacion_igss ` +
		`FROM v1wq1ics1m037sn6.usuario_trabajador ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ut := UsuarioTrabajador{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ut.ID, &ut.Direccion, &ut.FechaEgreso, &ut.Dpi, &ut.Nit, &ut.Telefono, &ut.NumeroAfiliacionIgss)
	if err != nil {
		return nil, err
	}

	return &ut, nil
}
