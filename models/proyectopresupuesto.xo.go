// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// ProyectoPresupuesto represents a row from 'v1wq1ics1m037sn6.proyecto_presupuesto'.
type ProyectoPresupuesto struct {
	ID                 int             `json:"id"`                  // id
	NombrePresupuesto  string          `json:"nombre_presupuesto"`  // nombre_presupuesto
	Honorarios         sql.NullFloat64 `json:"honorarios"`          // honorarios
	CreadoPorID        sql.NullInt64   `json:"creado_por_id"`       // creado_por_id
	ActualizadoPorID   sql.NullInt64   `json:"actualizado_por_id"`  // actualizado_por_id
	FechaCreacion      time.Time       `json:"fecha_creacion"`      // fecha_creacion
	FechaActualizacion time.Time       `json:"fecha_actualizacion"` // fecha_actualizacion
	Estado             string          `json:"estado"`              // estado

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ProyectoPresupuesto exists in the database.
func (pp *ProyectoPresupuesto) Exists() bool {
	return pp._exists
}

// Deleted provides information if the ProyectoPresupuesto has been deleted from the database.
func (pp *ProyectoPresupuesto) Deleted() bool {
	return pp._deleted
}

// Insert inserts the ProyectoPresupuesto to the database.
func (pp *ProyectoPresupuesto) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.proyecto_presupuesto (` +
		`nombre_presupuesto, honorarios, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion, estado` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pp.NombrePresupuesto, pp.Honorarios, pp.CreadoPorID, pp.ActualizadoPorID, pp.FechaCreacion, pp.FechaActualizacion, pp.Estado)
	res, err := db.Exec(sqlstr, pp.NombrePresupuesto, pp.Honorarios, pp.CreadoPorID, pp.ActualizadoPorID, pp.FechaCreacion, pp.FechaActualizacion, pp.Estado)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pp.ID = int(id)
	pp._exists = true

	return nil
}

// Update updates the ProyectoPresupuesto in the database.
func (pp *ProyectoPresupuesto) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.proyecto_presupuesto SET ` +
		`nombre_presupuesto = ?, honorarios = ?, creado_por_id = ?, actualizado_por_id = ?, fecha_creacion = ?, fecha_actualizacion = ?, estado = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, pp.NombrePresupuesto, pp.Honorarios, pp.CreadoPorID, pp.ActualizadoPorID, pp.FechaCreacion, pp.FechaActualizacion, pp.Estado, pp.ID)
	_, err = db.Exec(sqlstr, pp.NombrePresupuesto, pp.Honorarios, pp.CreadoPorID, pp.ActualizadoPorID, pp.FechaCreacion, pp.FechaActualizacion, pp.Estado, pp.ID)
	return err
}

// Save saves the ProyectoPresupuesto to the database.
func (pp *ProyectoPresupuesto) Save(db XODB) error {
	if pp.Exists() {
		return pp.Update(db)
	}

	return pp.Insert(db)
}

// Delete deletes the ProyectoPresupuesto from the database.
func (pp *ProyectoPresupuesto) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pp._exists {
		return nil
	}

	// if deleted, bail
	if pp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.proyecto_presupuesto WHERE id = ?`

	// run query
	XOLog(sqlstr, pp.ID)
	_, err = db.Exec(sqlstr, pp.ID)
	if err != nil {
		return err
	}

	// set deleted
	pp._deleted = true

	return nil
}

// CodigoUsuarioByActualizadoPorID returns the CodigoUsuario associated with the ProyectoPresupuesto's ActualizadoPorID (actualizado_por_id).
//
// Generated from foreign key 'FK_2CCB1198F6167A1C'.
func (pp *ProyectoPresupuesto) CodigoUsuarioByActualizadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(pp.ActualizadoPorID.Int64))
}

// CodigoUsuarioByCreadoPorID returns the CodigoUsuario associated with the ProyectoPresupuesto's CreadoPorID (creado_por_id).
//
// Generated from foreign key 'FK_2CCB1198FE35D8C4'.
func (pp *ProyectoPresupuesto) CodigoUsuarioByCreadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(pp.CreadoPorID.Int64))
}

// ProyectoPresupuestosByActualizadoPorID retrieves a row from 'v1wq1ics1m037sn6.proyecto_presupuesto' as a ProyectoPresupuesto.
//
// Generated from index 'IDX_2CCB1198F6167A1C'.
func ProyectoPresupuestosByActualizadoPorID(db XODB, actualizadoPorID sql.NullInt64) ([]*ProyectoPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nombre_presupuesto, honorarios, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion, estado ` +
		`FROM v1wq1ics1m037sn6.proyecto_presupuesto ` +
		`WHERE actualizado_por_id = ?`

	// run query
	XOLog(sqlstr, actualizadoPorID)
	q, err := db.Query(sqlstr, actualizadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProyectoPresupuesto{}
	for q.Next() {
		pp := ProyectoPresupuesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&pp.ID, &pp.NombrePresupuesto, &pp.Honorarios, &pp.CreadoPorID, &pp.ActualizadoPorID, &pp.FechaCreacion, &pp.FechaActualizacion, &pp.Estado)
		if err != nil {
			return nil, err
		}

		res = append(res, &pp)
	}

	return res, nil
}

// ProyectoPresupuestosByCreadoPorID retrieves a row from 'v1wq1ics1m037sn6.proyecto_presupuesto' as a ProyectoPresupuesto.
//
// Generated from index 'IDX_2CCB1198FE35D8C4'.
func ProyectoPresupuestosByCreadoPorID(db XODB, creadoPorID sql.NullInt64) ([]*ProyectoPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nombre_presupuesto, honorarios, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion, estado ` +
		`FROM v1wq1ics1m037sn6.proyecto_presupuesto ` +
		`WHERE creado_por_id = ?`

	// run query
	XOLog(sqlstr, creadoPorID)
	q, err := db.Query(sqlstr, creadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ProyectoPresupuesto{}
	for q.Next() {
		pp := ProyectoPresupuesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&pp.ID, &pp.NombrePresupuesto, &pp.Honorarios, &pp.CreadoPorID, &pp.ActualizadoPorID, &pp.FechaCreacion, &pp.FechaActualizacion, &pp.Estado)
		if err != nil {
			return nil, err
		}

		res = append(res, &pp)
	}

	return res, nil
}

// ProyectoPresupuestoByID retrieves a row from 'v1wq1ics1m037sn6.proyecto_presupuesto' as a ProyectoPresupuesto.
//
// Generated from index 'proyecto_presupuesto_id_pkey'.
func ProyectoPresupuestoByID(db XODB, id int) (*ProyectoPresupuesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nombre_presupuesto, honorarios, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion, estado ` +
		`FROM v1wq1ics1m037sn6.proyecto_presupuesto ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	pp := ProyectoPresupuesto{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pp.ID, &pp.NombrePresupuesto, &pp.Honorarios, &pp.CreadoPorID, &pp.ActualizadoPorID, &pp.FechaCreacion, &pp.FechaActualizacion, &pp.Estado)
	if err != nil {
		return nil, err
	}

	return &pp, nil
}
