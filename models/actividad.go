// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Actividad represents a row from 'v1wq1ics1m037sn6.actividad'.
type Actividad struct {
	ID                  int            `json:"id"`                    // id
	Nombre              string         `json:"nombre"`                // nombre
	Abreviatura         sql.NullString `json:"abreviatura"`           // abreviatura
	ActividadNoCargable bool           `json:"actividad_no_cargable"` // actividad_no_cargable
	CreadoPorID         sql.NullInt64  `json:"creado_por_id"`         // creado_por_id
	ActualizadoPorID    sql.NullInt64  `json:"actualizado_por_id"`    // actualizado_por_id
	FechaCreacion       time.Time      `json:"fecha_creacion"`        // fecha_creacion
	FechaActualizacion  time.Time      `json:"fecha_actualizacion"`   // fecha_actualizacion
	AreaID              sql.NullInt64  `json:"area_id"`               // area_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Actividad exists in the database.
func (a *Actividad) Exists() bool {
	return a._exists
}

// Deleted provides information if the Actividad has been deleted from the database.
func (a *Actividad) Deleted() bool {
	return a._deleted
}

// Insert inserts the Actividad to the database.
func (a *Actividad) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.actividad (` +
		`nombre, abreviatura, actividad_no_cargable, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion, area_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, a.Nombre, a.Abreviatura, a.ActividadNoCargable, a.CreadoPorID, a.ActualizadoPorID, a.FechaCreacion, a.FechaActualizacion, a.AreaID)
	res, err := db.Exec(sqlstr, a.Nombre, a.Abreviatura, a.ActividadNoCargable, a.CreadoPorID, a.ActualizadoPorID, a.FechaCreacion, a.FechaActualizacion, a.AreaID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = int(id)
	a._exists = true

	return nil
}

// Update updates the Actividad in the database.
func (a *Actividad) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.actividad SET ` +
		`nombre = ?, abreviatura = ?, actividad_no_cargable = ?, creado_por_id = ?, actualizado_por_id = ?, fecha_creacion = ?, fecha_actualizacion = ?, area_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, a.Nombre, a.Abreviatura, a.ActividadNoCargable, a.CreadoPorID, a.ActualizadoPorID, a.FechaCreacion, a.FechaActualizacion, a.AreaID, a.ID)
	_, err = db.Exec(sqlstr, a.Nombre, a.Abreviatura, a.ActividadNoCargable, a.CreadoPorID, a.ActualizadoPorID, a.FechaCreacion, a.FechaActualizacion, a.AreaID, a.ID)
	return err
}

// Save saves the Actividad to the database.
func (a *Actividad) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Actividad from the database.
func (a *Actividad) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.actividad WHERE id = ?`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// Area returns the Area associated with the Actividad's AreaID (area_id).
//
// Generated from foreign key 'FK_8DF2BD06BD0F409C'.
func (a *Actividad) Area(db XODB) (*Area, error) {
	return AreaByID(db, int(a.AreaID.Int64))
}

// CodigoUsuarioByActualizadoPorID returns the CodigoUsuario associated with the Actividad's ActualizadoPorID (actualizado_por_id).
//
// Generated from foreign key 'FK_8DF2BD06F6167A1C'.
func (a *Actividad) CodigoUsuarioByActualizadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(a.ActualizadoPorID.Int64))
}

// CodigoUsuarioByCreadoPorID returns the CodigoUsuario associated with the Actividad's CreadoPorID (creado_por_id).
//
// Generated from foreign key 'FK_8DF2BD06FE35D8C4'.
func (a *Actividad) CodigoUsuarioByCreadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(a.CreadoPorID.Int64))
}

// ActividadsByAreaID retrieves a row from 'v1wq1ics1m037sn6.actividad' as a Actividad.
//
// Generated from index 'IDX_8DF2BD06BD0F409C'.
func ActividadsByAreaID(db XODB, areaID sql.NullInt64) ([]*Actividad, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nombre, abreviatura, actividad_no_cargable, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion, area_id ` +
		`FROM v1wq1ics1m037sn6.actividad ` +
		`WHERE area_id = ?`

	// run query
	XOLog(sqlstr, areaID)
	q, err := db.Query(sqlstr, areaID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Actividad{}
	for q.Next() {
		a := Actividad{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.Nombre, &a.Abreviatura, &a.ActividadNoCargable, &a.CreadoPorID, &a.ActualizadoPorID, &a.FechaCreacion, &a.FechaActualizacion, &a.AreaID)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// ActividadsByActualizadoPorID retrieves a row from 'v1wq1ics1m037sn6.actividad' as a Actividad.
//
// Generated from index 'IDX_8DF2BD06F6167A1C'.
func ActividadsByActualizadoPorID(db XODB, actualizadoPorID sql.NullInt64) ([]*Actividad, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nombre, abreviatura, actividad_no_cargable, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion, area_id ` +
		`FROM v1wq1ics1m037sn6.actividad ` +
		`WHERE actualizado_por_id = ?`

	// run query
	XOLog(sqlstr, actualizadoPorID)
	q, err := db.Query(sqlstr, actualizadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Actividad{}
	for q.Next() {
		a := Actividad{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.Nombre, &a.Abreviatura, &a.ActividadNoCargable, &a.CreadoPorID, &a.ActualizadoPorID, &a.FechaCreacion, &a.FechaActualizacion, &a.AreaID)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// ActividadsByCreadoPorID retrieves a row from 'v1wq1ics1m037sn6.actividad' as a Actividad.
//
// Generated from index 'IDX_8DF2BD06FE35D8C4'.
func ActividadsByCreadoPorID(db XODB, creadoPorID sql.NullInt64) ([]*Actividad, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nombre, abreviatura, actividad_no_cargable, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion, area_id ` +
		`FROM v1wq1ics1m037sn6.actividad ` +
		`WHERE creado_por_id = ?`

	// run query
	XOLog(sqlstr, creadoPorID)
	q, err := db.Query(sqlstr, creadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Actividad{}
	for q.Next() {
		a := Actividad{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.Nombre, &a.Abreviatura, &a.ActividadNoCargable, &a.CreadoPorID, &a.ActualizadoPorID, &a.FechaCreacion, &a.FechaActualizacion, &a.AreaID)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// ActividadByID retrieves a row from 'v1wq1ics1m037sn6.actividad' as a Actividad.
//
// Generated from index 'actividad_id_pkey'.
func ActividadByID(db XODB, id int) (*Actividad, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nombre, abreviatura, actividad_no_cargable, creado_por_id, actualizado_por_id, fecha_creacion, fecha_actualizacion, area_id ` +
		`FROM v1wq1ics1m037sn6.actividad ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	a := Actividad{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.Nombre, &a.Abreviatura, &a.ActividadNoCargable, &a.CreadoPorID, &a.ActualizadoPorID, &a.FechaCreacion, &a.FechaActualizacion, &a.AreaID)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
