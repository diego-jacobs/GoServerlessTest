// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// Usuario represents a row from 'v1wq1ics1m037sn6.usuario'.
type Usuario struct {
	ID                  int            `json:"id"`                    // id
	CodigoID            sql.NullInt64  `json:"codigo_id"`             // codigo_id
	Username            string         `json:"username"`              // username
	UsernameCanonical   string         `json:"username_canonical"`    // username_canonical
	Email               string         `json:"email"`                 // email
	EmailCanonical      string         `json:"email_canonical"`       // email_canonical
	Enabled             bool           `json:"enabled"`               // enabled
	Salt                sql.NullString `json:"salt"`                  // salt
	Password            string         `json:"password"`              // password
	LastLogin           mysql.NullTime `json:"last_login"`            // last_login
	ConfirmationToken   sql.NullString `json:"confirmation_token"`    // confirmation_token
	PasswordRequestedAt mysql.NullTime `json:"password_requested_at"` // password_requested_at
	Roles               string         `json:"roles"`                 // roles
	Nombre              string         `json:"nombre"`                // nombre
	Apellidos           string         `json:"apellidos"`             // apellidos
	APIKey              sql.NullString `json:"api_key"`               // api_key
	Type                string         `json:"type"`                  // type
	Initials            string         `json:"initials"`              // initials

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Usuario exists in the database.
func (u *Usuario) Exists() bool {
	return u._exists
}

// Deleted provides information if the Usuario has been deleted from the database.
func (u *Usuario) Deleted() bool {
	return u._deleted
}

// Insert inserts the Usuario to the database.
func (u *Usuario) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.usuario (` +
		`codigo_id, username, username_canonical, email, email_canonical, enabled, salt, password, last_login, confirmation_token, password_requested_at, roles, nombre, apellidos, api_key, type, initials` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.CodigoID, u.Username, u.UsernameCanonical, u.Email, u.EmailCanonical, u.Enabled, u.Salt, u.Password, u.LastLogin, u.ConfirmationToken, u.PasswordRequestedAt, u.Roles, u.Nombre, u.Apellidos, u.APIKey, u.Type, u.Initials)
	res, err := db.Exec(sqlstr, u.CodigoID, u.Username, u.UsernameCanonical, u.Email, u.EmailCanonical, u.Enabled, u.Salt, u.Password, u.LastLogin, u.ConfirmationToken, u.PasswordRequestedAt, u.Roles, u.Nombre, u.Apellidos, u.APIKey, u.Type, u.Initials)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.ID = int(id)
	u._exists = true

	return nil
}

// Update updates the Usuario in the database.
func (u *Usuario) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.usuario SET ` +
		`codigo_id = ?, username = ?, username_canonical = ?, email = ?, email_canonical = ?, enabled = ?, salt = ?, password = ?, last_login = ?, confirmation_token = ?, password_requested_at = ?, roles = ?, nombre = ?, apellidos = ?, api_key = ?, type = ?, initials = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, u.CodigoID, u.Username, u.UsernameCanonical, u.Email, u.EmailCanonical, u.Enabled, u.Salt, u.Password, u.LastLogin, u.ConfirmationToken, u.PasswordRequestedAt, u.Roles, u.Nombre, u.Apellidos, u.APIKey, u.Type, u.Initials, u.ID)
	_, err = db.Exec(sqlstr, u.CodigoID, u.Username, u.UsernameCanonical, u.Email, u.EmailCanonical, u.Enabled, u.Salt, u.Password, u.LastLogin, u.ConfirmationToken, u.PasswordRequestedAt, u.Roles, u.Nombre, u.Apellidos, u.APIKey, u.Type, u.Initials, u.ID)
	return err
}

// Save saves the Usuario to the database.
func (u *Usuario) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Delete deletes the Usuario from the database.
func (u *Usuario) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.usuario WHERE id = ?`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// CodigoUsuario returns the CodigoUsuario associated with the Usuario's CodigoID (codigo_id).
//
// Generated from foreign key 'FK_2265B05DB797D96'.
func (u *Usuario) CodigoUsuario(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(u.CodigoID.Int64))
}

// UsuarioByUsernameCanonical retrieves a row from 'v1wq1ics1m037sn6.usuario' as a Usuario.
//
// Generated from index 'UNIQ_2265B05D92FC23A8'.
func UsuarioByUsernameCanonical(db XODB, usernameCanonical string) (*Usuario, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, codigo_id, username, username_canonical, email, email_canonical, enabled, salt, password, last_login, confirmation_token, password_requested_at, roles, nombre, apellidos, api_key, type, initials ` +
		`FROM v1wq1ics1m037sn6.usuario ` +
		`WHERE username_canonical = ?`

	// run query
	XOLog(sqlstr, usernameCanonical)
	u := Usuario{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, usernameCanonical).Scan(&u.ID, &u.CodigoID, &u.Username, &u.UsernameCanonical, &u.Email, &u.EmailCanonical, &u.Enabled, &u.Salt, &u.Password, &u.LastLogin, &u.ConfirmationToken, &u.PasswordRequestedAt, &u.Roles, &u.Nombre, &u.Apellidos, &u.APIKey, &u.Type, &u.Initials)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UsuarioByEmailCanonical retrieves a row from 'v1wq1ics1m037sn6.usuario' as a Usuario.
//
// Generated from index 'UNIQ_2265B05DA0D96FBF'.
func UsuarioByEmailCanonical(db XODB, emailCanonical string) (*Usuario, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, codigo_id, username, username_canonical, email, email_canonical, enabled, salt, password, last_login, confirmation_token, password_requested_at, roles, nombre, apellidos, api_key, type, initials ` +
		`FROM v1wq1ics1m037sn6.usuario ` +
		`WHERE email_canonical = ?`

	// run query
	XOLog(sqlstr, emailCanonical)
	u := Usuario{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, emailCanonical).Scan(&u.ID, &u.CodigoID, &u.Username, &u.UsernameCanonical, &u.Email, &u.EmailCanonical, &u.Enabled, &u.Salt, &u.Password, &u.LastLogin, &u.ConfirmationToken, &u.PasswordRequestedAt, &u.Roles, &u.Nombre, &u.Apellidos, &u.APIKey, &u.Type, &u.Initials)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UsuarioByCodigoID retrieves a row from 'v1wq1ics1m037sn6.usuario' as a Usuario.
//
// Generated from index 'UNIQ_2265B05DB797D96'.
func UsuarioByCodigoID(db XODB, codigoID sql.NullInt64) (*Usuario, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, codigo_id, username, username_canonical, email, email_canonical, enabled, salt, password, last_login, confirmation_token, password_requested_at, roles, nombre, apellidos, api_key, type, initials ` +
		`FROM v1wq1ics1m037sn6.usuario ` +
		`WHERE codigo_id = ?`

	// run query
	XOLog(sqlstr, codigoID)
	u := Usuario{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, codigoID).Scan(&u.ID, &u.CodigoID, &u.Username, &u.UsernameCanonical, &u.Email, &u.EmailCanonical, &u.Enabled, &u.Salt, &u.Password, &u.LastLogin, &u.ConfirmationToken, &u.PasswordRequestedAt, &u.Roles, &u.Nombre, &u.Apellidos, &u.APIKey, &u.Type, &u.Initials)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UsuarioByConfirmationToken retrieves a row from 'v1wq1ics1m037sn6.usuario' as a Usuario.
//
// Generated from index 'UNIQ_2265B05DC05FB297'.
func UsuarioByConfirmationToken(db XODB, confirmationToken sql.NullString) (*Usuario, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, codigo_id, username, username_canonical, email, email_canonical, enabled, salt, password, last_login, confirmation_token, password_requested_at, roles, nombre, apellidos, api_key, type, initials ` +
		`FROM v1wq1ics1m037sn6.usuario ` +
		`WHERE confirmation_token = ?`

	// run query
	XOLog(sqlstr, confirmationToken)
	u := Usuario{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, confirmationToken).Scan(&u.ID, &u.CodigoID, &u.Username, &u.UsernameCanonical, &u.Email, &u.EmailCanonical, &u.Enabled, &u.Salt, &u.Password, &u.LastLogin, &u.ConfirmationToken, &u.PasswordRequestedAt, &u.Roles, &u.Nombre, &u.Apellidos, &u.APIKey, &u.Type, &u.Initials)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UsuarioByAPIKey retrieves a row from 'v1wq1ics1m037sn6.usuario' as a Usuario.
//
// Generated from index 'UNIQ_2265B05DC912ED9D'.
func UsuarioByAPIKey(db XODB, apiKey sql.NullString) (*Usuario, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, codigo_id, username, username_canonical, email, email_canonical, enabled, salt, password, last_login, confirmation_token, password_requested_at, roles, nombre, apellidos, api_key, type, initials ` +
		`FROM v1wq1ics1m037sn6.usuario ` +
		`WHERE api_key = ?`

	// run query
	XOLog(sqlstr, apiKey)
	u := Usuario{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, apiKey).Scan(&u.ID, &u.CodigoID, &u.Username, &u.UsernameCanonical, &u.Email, &u.EmailCanonical, &u.Enabled, &u.Salt, &u.Password, &u.LastLogin, &u.ConfirmationToken, &u.PasswordRequestedAt, &u.Roles, &u.Nombre, &u.Apellidos, &u.APIKey, &u.Type, &u.Initials)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UsuarioByID retrieves a row from 'v1wq1ics1m037sn6.usuario' as a Usuario.
//
// Generated from index 'usuario_id_pkey'.
func UsuarioByID(db XODB, id int) (*Usuario, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, codigo_id, username, username_canonical, email, email_canonical, enabled, salt, password, last_login, confirmation_token, password_requested_at, roles, nombre, apellidos, api_key, type, initials ` +
		`FROM v1wq1ics1m037sn6.usuario ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	u := Usuario{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.CodigoID, &u.Username, &u.UsernameCanonical, &u.Email, &u.EmailCanonical, &u.Enabled, &u.Salt, &u.Password, &u.LastLogin, &u.ConfirmationToken, &u.PasswordRequestedAt, &u.Roles, &u.Nombre, &u.Apellidos, &u.APIKey, &u.Type, &u.Initials)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
