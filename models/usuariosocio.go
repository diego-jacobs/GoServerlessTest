// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// UsuarioSocio represents a row from 'v1wq1ics1m037sn6.usuario_socio'.
type UsuarioSocio struct {
	ID int `json:"id"` // id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UsuarioSocio exists in the database.
func (us *UsuarioSocio) Exists() bool {
	return us._exists
}

// Deleted provides information if the UsuarioSocio has been deleted from the database.
func (us *UsuarioSocio) Deleted() bool {
	return us._deleted
}

// Insert inserts the UsuarioSocio to the database.
func (us *UsuarioSocio) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if us._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.usuario_socio (` +
		`id` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, us.ID)
	_, err = db.Exec(sqlstr, us.ID)
	if err != nil {
		return err
	}

	// set existence
	us._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the UsuarioSocio from the database.
func (us *UsuarioSocio) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !us._exists {
		return nil
	}

	// if deleted, bail
	if us._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.usuario_socio WHERE id = ?`

	// run query
	XOLog(sqlstr, us.ID)
	_, err = db.Exec(sqlstr, us.ID)
	if err != nil {
		return err
	}

	// set deleted
	us._deleted = true

	return nil
}

// Usuario returns the Usuario associated with the UsuarioSocio's ID (id).
//
// Generated from foreign key 'FK_25683917BF396750'.
func (us *UsuarioSocio) Usuario(db XODB) (*Usuario, error) {
	return UsuarioByID(db, us.ID)
}

// UsuarioSocioByID retrieves a row from 'v1wq1ics1m037sn6.usuario_socio' as a UsuarioSocio.
//
// Generated from index 'usuario_socio_id_pkey'.
func UsuarioSocioByID(db XODB, id int) (*UsuarioSocio, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id ` +
		`FROM v1wq1ics1m037sn6.usuario_socio ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	us := UsuarioSocio{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&us.ID)
	if err != nil {
		return nil, err
	}

	return &us, nil
}
