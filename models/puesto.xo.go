// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Puesto represents a row from 'v1wq1ics1m037sn6.puesto'.
type Puesto struct {
	ID                 int           `json:"id"`                  // id
	TipoPuestoID       sql.NullInt64 `json:"tipo_puesto_id"`      // tipo_puesto_id
	DepartamentoID     sql.NullInt64 `json:"departamento_id"`     // departamento_id
	UsuarioID          sql.NullInt64 `json:"usuario_id"`          // usuario_id
	FechaCreacion      time.Time     `json:"fecha_creacion"`      // fecha_creacion
	FechaActualizacion time.Time     `json:"fecha_actualizacion"` // fecha_actualizacion
	CreadoPorID        sql.NullInt64 `json:"creado_por_id"`       // creado_por_id
	ActualizadoPorID   sql.NullInt64 `json:"actualizado_por_id"`  // actualizado_por_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Puesto exists in the database.
func (p *Puesto) Exists() bool {
	return p._exists
}

// Deleted provides information if the Puesto has been deleted from the database.
func (p *Puesto) Deleted() bool {
	return p._deleted
}

// Insert inserts the Puesto to the database.
func (p *Puesto) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.puesto (` +
		`tipo_puesto_id, departamento_id, usuario_id, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.TipoPuestoID, p.DepartamentoID, p.UsuarioID, p.FechaCreacion, p.FechaActualizacion, p.CreadoPorID, p.ActualizadoPorID)
	res, err := db.Exec(sqlstr, p.TipoPuestoID, p.DepartamentoID, p.UsuarioID, p.FechaCreacion, p.FechaActualizacion, p.CreadoPorID, p.ActualizadoPorID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.ID = int(id)
	p._exists = true

	return nil
}

// Update updates the Puesto in the database.
func (p *Puesto) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE v1wq1ics1m037sn6.puesto SET ` +
		`tipo_puesto_id = ?, departamento_id = ?, usuario_id = ?, fecha_creacion = ?, fecha_actualizacion = ?, creado_por_id = ?, actualizado_por_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, p.TipoPuestoID, p.DepartamentoID, p.UsuarioID, p.FechaCreacion, p.FechaActualizacion, p.CreadoPorID, p.ActualizadoPorID, p.ID)
	_, err = db.Exec(sqlstr, p.TipoPuestoID, p.DepartamentoID, p.UsuarioID, p.FechaCreacion, p.FechaActualizacion, p.CreadoPorID, p.ActualizadoPorID, p.ID)
	return err
}

// Save saves the Puesto to the database.
func (p *Puesto) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Puesto from the database.
func (p *Puesto) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.puesto WHERE id = ?`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// Departamento returns the Departamento associated with the Puesto's DepartamentoID (departamento_id).
//
// Generated from foreign key 'FK_47C3D2DE5A91C08D'.
func (p *Puesto) Departamento(db XODB) (*Departamento, error) {
	return DepartamentoByID(db, int(p.DepartamentoID.Int64))
}

// TipoPuesto returns the TipoPuesto associated with the Puesto's TipoPuestoID (tipo_puesto_id).
//
// Generated from foreign key 'FK_47C3D2DEB25B5694'.
func (p *Puesto) TipoPuesto(db XODB) (*TipoPuesto, error) {
	return TipoPuestoByID(db, int(p.TipoPuestoID.Int64))
}

// UsuarioTrabajador returns the UsuarioTrabajador associated with the Puesto's UsuarioID (usuario_id).
//
// Generated from foreign key 'FK_47C3D2DEDB38439E'.
func (p *Puesto) UsuarioTrabajador(db XODB) (*UsuarioTrabajador, error) {
	return UsuarioTrabajadorByID(db, int(p.UsuarioID.Int64))
}

// CodigoUsuarioByActualizadoPorID returns the CodigoUsuario associated with the Puesto's ActualizadoPorID (actualizado_por_id).
//
// Generated from foreign key 'FK_47C3D2DEF6167A1C'.
func (p *Puesto) CodigoUsuarioByActualizadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(p.ActualizadoPorID.Int64))
}

// CodigoUsuarioByCreadoPorID returns the CodigoUsuario associated with the Puesto's CreadoPorID (creado_por_id).
//
// Generated from foreign key 'FK_47C3D2DEFE35D8C4'.
func (p *Puesto) CodigoUsuarioByCreadoPorID(db XODB) (*CodigoUsuario, error) {
	return CodigoUsuarioByID(db, int(p.CreadoPorID.Int64))
}

// PuestosByDepartamentoID retrieves a row from 'v1wq1ics1m037sn6.puesto' as a Puesto.
//
// Generated from index 'IDX_47C3D2DE5A91C08D'.
func PuestosByDepartamentoID(db XODB, departamentoID sql.NullInt64) ([]*Puesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, tipo_puesto_id, departamento_id, usuario_id, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id ` +
		`FROM v1wq1ics1m037sn6.puesto ` +
		`WHERE departamento_id = ?`

	// run query
	XOLog(sqlstr, departamentoID)
	q, err := db.Query(sqlstr, departamentoID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Puesto{}
	for q.Next() {
		p := Puesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.TipoPuestoID, &p.DepartamentoID, &p.UsuarioID, &p.FechaCreacion, &p.FechaActualizacion, &p.CreadoPorID, &p.ActualizadoPorID)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PuestosByTipoPuestoID retrieves a row from 'v1wq1ics1m037sn6.puesto' as a Puesto.
//
// Generated from index 'IDX_47C3D2DEB25B5694'.
func PuestosByTipoPuestoID(db XODB, tipoPuestoID sql.NullInt64) ([]*Puesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, tipo_puesto_id, departamento_id, usuario_id, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id ` +
		`FROM v1wq1ics1m037sn6.puesto ` +
		`WHERE tipo_puesto_id = ?`

	// run query
	XOLog(sqlstr, tipoPuestoID)
	q, err := db.Query(sqlstr, tipoPuestoID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Puesto{}
	for q.Next() {
		p := Puesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.TipoPuestoID, &p.DepartamentoID, &p.UsuarioID, &p.FechaCreacion, &p.FechaActualizacion, &p.CreadoPorID, &p.ActualizadoPorID)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PuestosByUsuarioID retrieves a row from 'v1wq1ics1m037sn6.puesto' as a Puesto.
//
// Generated from index 'IDX_47C3D2DEDB38439E'.
func PuestosByUsuarioID(db XODB, usuarioID sql.NullInt64) ([]*Puesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, tipo_puesto_id, departamento_id, usuario_id, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id ` +
		`FROM v1wq1ics1m037sn6.puesto ` +
		`WHERE usuario_id = ?`

	// run query
	XOLog(sqlstr, usuarioID)
	q, err := db.Query(sqlstr, usuarioID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Puesto{}
	for q.Next() {
		p := Puesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.TipoPuestoID, &p.DepartamentoID, &p.UsuarioID, &p.FechaCreacion, &p.FechaActualizacion, &p.CreadoPorID, &p.ActualizadoPorID)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PuestosByActualizadoPorID retrieves a row from 'v1wq1ics1m037sn6.puesto' as a Puesto.
//
// Generated from index 'IDX_47C3D2DEF6167A1C'.
func PuestosByActualizadoPorID(db XODB, actualizadoPorID sql.NullInt64) ([]*Puesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, tipo_puesto_id, departamento_id, usuario_id, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id ` +
		`FROM v1wq1ics1m037sn6.puesto ` +
		`WHERE actualizado_por_id = ?`

	// run query
	XOLog(sqlstr, actualizadoPorID)
	q, err := db.Query(sqlstr, actualizadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Puesto{}
	for q.Next() {
		p := Puesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.TipoPuestoID, &p.DepartamentoID, &p.UsuarioID, &p.FechaCreacion, &p.FechaActualizacion, &p.CreadoPorID, &p.ActualizadoPorID)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PuestosByCreadoPorID retrieves a row from 'v1wq1ics1m037sn6.puesto' as a Puesto.
//
// Generated from index 'IDX_47C3D2DEFE35D8C4'.
func PuestosByCreadoPorID(db XODB, creadoPorID sql.NullInt64) ([]*Puesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, tipo_puesto_id, departamento_id, usuario_id, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id ` +
		`FROM v1wq1ics1m037sn6.puesto ` +
		`WHERE creado_por_id = ?`

	// run query
	XOLog(sqlstr, creadoPorID)
	q, err := db.Query(sqlstr, creadoPorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Puesto{}
	for q.Next() {
		p := Puesto{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.TipoPuestoID, &p.DepartamentoID, &p.UsuarioID, &p.FechaCreacion, &p.FechaActualizacion, &p.CreadoPorID, &p.ActualizadoPorID)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PuestoByID retrieves a row from 'v1wq1ics1m037sn6.puesto' as a Puesto.
//
// Generated from index 'puesto_id_pkey'.
func PuestoByID(db XODB, id int) (*Puesto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, tipo_puesto_id, departamento_id, usuario_id, fecha_creacion, fecha_actualizacion, creado_por_id, actualizado_por_id ` +
		`FROM v1wq1ics1m037sn6.puesto ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	p := Puesto{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.TipoPuestoID, &p.DepartamentoID, &p.UsuarioID, &p.FechaCreacion, &p.FechaActualizacion, &p.CreadoPorID, &p.ActualizadoPorID)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
