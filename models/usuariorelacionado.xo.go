// Package models contains the types for schema 'v1wq1ics1m037sn6'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// UsuarioRelacionado represents a row from 'v1wq1ics1m037sn6.usuario_relacionado'.
type UsuarioRelacionado struct {
	UsuarioPerteneceID int `json:"usuario_pertenece_id"` // usuario_pertenece_id
	UsuarioID          int `json:"usuario_id"`           // usuario_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UsuarioRelacionado exists in the database.
func (ur *UsuarioRelacionado) Exists() bool {
	return ur._exists
}

// Deleted provides information if the UsuarioRelacionado has been deleted from the database.
func (ur *UsuarioRelacionado) Deleted() bool {
	return ur._deleted
}

// Insert inserts the UsuarioRelacionado to the database.
func (ur *UsuarioRelacionado) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ur._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO v1wq1ics1m037sn6.usuario_relacionado (` +
		`usuario_pertenece_id, usuario_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ur.UsuarioPerteneceID, ur.UsuarioID)
	_, err = db.Exec(sqlstr, ur.UsuarioPerteneceID, ur.UsuarioID)
	if err != nil {
		return err
	}

	// set existence
	ur._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the UsuarioRelacionado from the database.
func (ur *UsuarioRelacionado) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ur._exists {
		return nil
	}

	// if deleted, bail
	if ur._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM v1wq1ics1m037sn6.usuario_relacionado WHERE usuario_pertenece_id = ? AND usuario_id = ?`

	// run query
	XOLog(sqlstr, ur.UsuarioPerteneceID, ur.UsuarioID)
	_, err = db.Exec(sqlstr, ur.UsuarioPerteneceID, ur.UsuarioID)
	if err != nil {
		return err
	}

	// set deleted
	ur._deleted = true

	return nil
}

// UsuarioByUsuarioPerteneceID returns the Usuario associated with the UsuarioRelacionado's UsuarioPerteneceID (usuario_pertenece_id).
//
// Generated from foreign key 'FK_A48DAECA7B062E48'.
func (ur *UsuarioRelacionado) UsuarioByUsuarioPerteneceID(db XODB) (*Usuario, error) {
	return UsuarioByID(db, ur.UsuarioPerteneceID)
}

// UsuarioByUsuarioID returns the Usuario associated with the UsuarioRelacionado's UsuarioID (usuario_id).
//
// Generated from foreign key 'FK_A48DAECADB38439E'.
func (ur *UsuarioRelacionado) UsuarioByUsuarioID(db XODB) (*Usuario, error) {
	return UsuarioByID(db, ur.UsuarioID)
}

// UsuarioRelacionadosByUsuarioPerteneceID retrieves a row from 'v1wq1ics1m037sn6.usuario_relacionado' as a UsuarioRelacionado.
//
// Generated from index 'IDX_A48DAECA7B062E48'.
func UsuarioRelacionadosByUsuarioPerteneceID(db XODB, usuarioPerteneceID int) ([]*UsuarioRelacionado, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`usuario_pertenece_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.usuario_relacionado ` +
		`WHERE usuario_pertenece_id = ?`

	// run query
	XOLog(sqlstr, usuarioPerteneceID)
	q, err := db.Query(sqlstr, usuarioPerteneceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UsuarioRelacionado{}
	for q.Next() {
		ur := UsuarioRelacionado{
			_exists: true,
		}

		// scan
		err = q.Scan(&ur.UsuarioPerteneceID, &ur.UsuarioID)
		if err != nil {
			return nil, err
		}

		res = append(res, &ur)
	}

	return res, nil
}

// UsuarioRelacionadosByUsuarioID retrieves a row from 'v1wq1ics1m037sn6.usuario_relacionado' as a UsuarioRelacionado.
//
// Generated from index 'IDX_A48DAECADB38439E'.
func UsuarioRelacionadosByUsuarioID(db XODB, usuarioID int) ([]*UsuarioRelacionado, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`usuario_pertenece_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.usuario_relacionado ` +
		`WHERE usuario_id = ?`

	// run query
	XOLog(sqlstr, usuarioID)
	q, err := db.Query(sqlstr, usuarioID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UsuarioRelacionado{}
	for q.Next() {
		ur := UsuarioRelacionado{
			_exists: true,
		}

		// scan
		err = q.Scan(&ur.UsuarioPerteneceID, &ur.UsuarioID)
		if err != nil {
			return nil, err
		}

		res = append(res, &ur)
	}

	return res, nil
}

// UsuarioRelacionadoByUsuarioID retrieves a row from 'v1wq1ics1m037sn6.usuario_relacionado' as a UsuarioRelacionado.
//
// Generated from index 'usuario_relacionado_usuario_id_pkey'.
func UsuarioRelacionadoByUsuarioID(db XODB, usuarioID int) (*UsuarioRelacionado, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`usuario_pertenece_id, usuario_id ` +
		`FROM v1wq1ics1m037sn6.usuario_relacionado ` +
		`WHERE usuario_id = ?`

	// run query
	XOLog(sqlstr, usuarioID)
	ur := UsuarioRelacionado{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, usuarioID).Scan(&ur.UsuarioPerteneceID, &ur.UsuarioID)
	if err != nil {
		return nil, err
	}

	return &ur, nil
}
